{"ast":null,"code":"var _jsxFileName = \"/home/cesur/Documents/Projects/iki-kisilik-web/src/components/games/TankGame/TankGame.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport Tank from './Tank';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameArea = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: #d2b48c; // Çöl rengi\n  position: relative;\n  overflow: hidden;\n`;\n_c = GameArea;\nconst GameGrid = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-image: \n    linear-gradient(rgba(0, 0, 0, 0.1) 1px, transparent 1px),\n    linear-gradient(90deg, rgba(0, 0, 0, 0.1) 1px, transparent 1px);\n  background-size: 40px 40px;\n  pointer-events: none;\n`;\n_c2 = GameGrid;\nconst Grass = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-image: url(\"data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M50 0 L100 50 L50 100 L0 50 Z' fill='%232ecc71' fill-opacity='0.1'/%3E%3C/svg%3E\");\n  background-size: 20px 20px;\n  pointer-events: none;\n`;\nconst Bullet = styled.div`\n  position: absolute;\n  width: 8px;\n  height: 8px;\n  background: #fff;\n  border-radius: 50%;\n  transform: rotate(${props => props.rotation}deg);\n  box-shadow: 0 0 5px rgba(255, 255, 255, 0.8);\n`;\n_c3 = Bullet;\nconst HealthBar = styled.div`\n  position: absolute;\n  width: 40px;\n  height: 4px;\n  background: rgba(0, 0, 0, 0.3);\n  border-radius: 2px;\n  overflow: hidden;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: ${props => props.health}%;\n    height: 100%;\n    background: ${props => props.color};\n    transition: width 0.3s ease;\n  }\n`;\n_c4 = HealthBar;\nconst Controls = styled.div`\n  position: absolute;\n  bottom: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  display: flex;\n  gap: 20px;\n  z-index: 1;\n`;\nconst ControlButton = styled.button`\n  background: ${props => props.color};\n  border: none;\n  width: 50px;\n  height: 50px;\n  border-radius: 25px;\n  color: white;\n  font-size: 24px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  transition: all 0.2s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);\n  }\n\n  &:active {\n    transform: translateY(1px);\n  }\n`;\nconst FireButton = styled(ControlButton)`\n  background: #e74c3c;\n  width: 60px;\n  height: 60px;\n  font-size: 20px;\n`;\nconst CornerButton = styled.button`\n  position: absolute;\n  width: 90px;\n  height: 90px;\n  border-radius: 50%;\n  background: ${props => props.color};\n  color: #fff;\n  font-size: 2.5rem;\n  border: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 16px rgba(0,0,0,0.15);\n  z-index: 10;\n  cursor: pointer;\n  opacity: 0.95;\n  ${props => props.position === 'bottomLeft' && 'left: 30px; bottom: 30px;'}\n  ${props => props.position === 'bottomRight' && 'right: 30px; bottom: 30px;'}\n  ${props => props.position === 'topLeft' && 'left: 30px; top: 30px;'}\n  ${props => props.position === 'topRight' && 'right: 30px; top: 30px;'}\n`;\n_c5 = CornerButton;\nconst playerColors = {\n  1: '#e74c3c',\n  // Kırmızı\n  2: '#3498db',\n  // Mavi\n  3: '#2ecc71',\n  // Yeşil\n  4: '#f1c40f' // Sarı\n};\nconst cornerPositions = ['bottomLeft',\n// 1. oyuncu\n'bottomRight',\n// 2. oyuncu\n'topLeft',\n// 3. oyuncu\n'topRight' // 4. oyuncu\n];\nconst TANK_SIZE = 60;\nconst CANNON_LENGTH = 30;\nconst GRID_SIZE = 80; // Kare boyutu\nconst GRID_COLS = Math.floor(window.innerWidth / GRID_SIZE);\nconst GRID_ROWS = Math.floor(window.innerHeight / GRID_SIZE);\nconst Wall = styled.div`\n  position: absolute;\n  background: #e0e0e0;\n  border: 3px solid #bdbdbd;\n  box-sizing: border-box;\n  border-radius: 4px;\n`;\n_c6 = Wall;\nconst GrassPatch = styled.div`\n  position: absolute;\n  width: 40px;\n  height: 40px;\n  background: radial-gradient(circle at 60% 40%, #4caf50 70%, #388e3c 100%);\n  border-radius: 50%;\n  opacity: 0.7;\n`;\nconst CountdownOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(0,0,0,0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n`;\n_c7 = CountdownOverlay;\nconst CountdownText = styled.div`\n  color: #fff;\n  font-size: 8rem;\n  font-weight: bold;\n  text-shadow: 0 0 40px #000, 0 0 10px #fff;\n  animation: pop 0.5s;\n  @keyframes pop {\n    0% { transform: scale(0.7); opacity: 0.5; }\n    60% { transform: scale(1.2); opacity: 1; }\n    100% { transform: scale(1); opacity: 1; }\n  }\n`;\n\n// Labirent için grid tabanlı duvarlar\n_c8 = CountdownText;\nfunction generateMaze(cols, rows) {\n  // Basit bir maze algoritması (örnek: her satırda ve sütunda rastgele kısa kenarlı duvarlar)\n  const walls = [];\n  for (let y = 0; y < rows; y++) {\n    for (let x = 0; x < cols; x++) {\n      // Yatay duvar\n      if (Math.random() > 0.6 && x < cols - 1) {\n        walls.push({\n          x: x * GRID_SIZE,\n          y: y * GRID_SIZE,\n          w: GRID_SIZE,\n          h: 8\n        });\n      }\n      // Dikey duvar\n      if (Math.random() > 0.6 && y < rows - 1) {\n        walls.push({\n          x: x * GRID_SIZE,\n          y: y * GRID_SIZE,\n          w: 8,\n          h: GRID_SIZE\n        });\n      }\n    }\n  }\n  // Kenar duvarları\n  walls.push({\n    x: 0,\n    y: 0,\n    w: cols * GRID_SIZE,\n    h: 8\n  }); // üst\n  walls.push({\n    x: 0,\n    y: rows * GRID_SIZE - 8,\n    w: cols * GRID_SIZE,\n    h: 8\n  }); // alt\n  walls.push({\n    x: 0,\n    y: 0,\n    w: 8,\n    h: rows * GRID_SIZE\n  }); // sol\n  walls.push({\n    x: cols * GRID_SIZE - 8,\n    y: 0,\n    w: 8,\n    h: rows * GRID_SIZE\n  }); // sağ\n  return walls;\n}\nconst TankGame = ({\n  playerCount,\n  deviceType\n}) => {\n  _s();\n  const [players, setPlayers] = useState([]);\n  const [bullets, setBullets] = useState([]);\n  const [rotating, setRotating] = useState({});\n  const [moving, setMoving] = useState({});\n  const [activePlayer, setActivePlayer] = useState(1);\n  const [walls, setWalls] = useState([]);\n  const [tankSize, setTankSize] = useState(60);\n  const [countdown, setCountdown] = useState(3);\n  const [gameStarted, setGameStarted] = useState(false);\n  useEffect(() => {\n    const initialPlayers = Array.from({\n      length: playerCount\n    }, (_, i) => ({\n      id: i + 1,\n      position: {\n        x: window.innerWidth / (playerCount + 1) * (i + 1),\n        y: window.innerHeight / 2\n      },\n      rotation: 0,\n      health: 100,\n      isMoving: false\n    }));\n    setPlayers(initialPlayers);\n  }, [playerCount]);\n  const movePlayer = useCallback((playerId, direction) => {\n    setPlayers(prevPlayers => prevPlayers.map(player => {\n      if (player.id === playerId) {\n        const speed = 5;\n        let newX = player.position.x;\n        let newY = player.position.y;\n        let newRotation = player.rotation;\n        switch (direction) {\n          case 'up':\n            newY -= speed;\n            newRotation = 0;\n            break;\n          case 'down':\n            newY += speed;\n            newRotation = 180;\n            break;\n          case 'left':\n            newX -= speed;\n            newRotation = 270;\n            break;\n          case 'right':\n            newX += speed;\n            newRotation = 90;\n            break;\n        }\n\n        // Sınırları kontrol et\n        newX = Math.max(0, Math.min(window.innerWidth - 60, newX));\n        newY = Math.max(0, Math.min(window.innerHeight - 60, newY));\n        return {\n          ...player,\n          position: {\n            x: newX,\n            y: newY\n          },\n          rotation: newRotation,\n          isMoving: true\n        };\n      }\n      return {\n        ...player,\n        isMoving: false\n      };\n    }));\n  }, []);\n  const fireBullet = useCallback(playerId => {\n    const player = players.find(p => p.id === playerId);\n    if (!player) return;\n    const rad = player.rotation * Math.PI / 180;\n    // Tankın merkezinden namlu ucuna offset\n    const offsetX = Math.sin(rad) * (TANK_SIZE / 2 + CANNON_LENGTH / 2);\n    const offsetY = -Math.cos(rad) * (TANK_SIZE / 2 + CANNON_LENGTH / 2);\n    const bullet = {\n      id: Date.now() + Math.random(),\n      playerId,\n      position: {\n        x: player.position.x + TANK_SIZE / 2 + offsetX - 4,\n        // 4: mermi yarıçapı\n        y: player.position.y + TANK_SIZE / 2 + offsetY - 4\n      },\n      rotation: player.rotation,\n      bounces: 0\n    };\n    setBullets(prev => [...prev, bullet]);\n  }, [players]);\n\n  // Maze oluştur ve tank boyutunu ayarla\n  useEffect(() => {\n    const maze = generateMaze(GRID_COLS, GRID_ROWS);\n    setWalls(maze);\n    let size = 60;\n    if (maze.length > 60) size = 36;else if (maze.length > 40) size = 44;else if (maze.length > 25) size = 52;\n    setTankSize(size);\n  }, []);\n\n  // Geri sayım başlat\n  useEffect(() => {\n    setCountdown(3);\n    setGameStarted(false);\n  }, [playerCount]);\n  useEffect(() => {\n    let timer;\n    if (countdown !== null) {\n      if (countdown > 0) {\n        timer = setTimeout(() => setCountdown(c => c !== null ? c - 1 : null), 1000);\n      } else if (countdown === 0) {\n        timer = setTimeout(() => {\n          setCountdown(null);\n          setGameStarted(true);\n        }, 800);\n      }\n    }\n    return () => clearTimeout(timer);\n  }, [countdown]);\n\n  // Mermiler düz gitsin ve sekme efektiyle yön değiştirsin, 3 sekmeden sonra kaybolsun\n  useEffect(() => {\n    const bulletInterval = setInterval(() => {\n      setBullets(prevBullets => {\n        return prevBullets.map(bullet => {\n          let speed = 10;\n          let rad = bullet.rotation * Math.PI / 180;\n          let newX = bullet.position.x + Math.cos(rad) * speed;\n          let newY = bullet.position.y + Math.sin(rad) * speed;\n          let newRotation = bullet.rotation;\n          let bounces = bullet.bounces;\n          // Sınırdan sekme\n          if (newX < 0 || newX > window.innerWidth - 8) {\n            newRotation = 180 - newRotation;\n            bounces++;\n          }\n          if (newY < 0 || newY > window.innerHeight - 8) {\n            newRotation = 360 - newRotation;\n            bounces++;\n          }\n          // Duvarlardan sekme\n          for (const wall of walls) {\n            if (newX + 8 > wall.x && newX < wall.x + wall.w && newY + 8 > wall.y && newY < wall.y + wall.h) {\n              // Yatay mı dikey mi?\n              if (wall.w > wall.h) {\n                newRotation = 360 - newRotation;\n              } else {\n                newRotation = 180 - newRotation;\n              }\n              bounces++;\n              break;\n            }\n          }\n          if (bounces >= 3) return null;\n          return {\n            ...bullet,\n            position: {\n              x: newX,\n              y: newY\n            },\n            rotation: newRotation,\n            bounces\n          };\n        }).filter(b => b !== null);\n      });\n    }, 16);\n    return () => clearInterval(bulletInterval);\n  }, [walls]);\n\n  // Başlangıçta tanklar dönüyor, hareket etmiyor\n  useEffect(() => {\n    const initialRotating = {};\n    const initialMoving = {};\n    for (let i = 1; i <= playerCount; i++) {\n      initialRotating[i] = true;\n      initialMoving[i] = false;\n    }\n    setRotating(initialRotating);\n    setMoving(initialMoving);\n  }, [playerCount]);\n\n  // Tanklar sadece rotating true ise döner\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setPlayers(prevPlayers => prevPlayers.map(player => {\n        if (rotating[player.id]) {\n          return {\n            ...player,\n            rotation: player.rotation + 2 // Sürekli artar, sıfırlanmaz\n          };\n        }\n        return player;\n      }));\n    }, 30);\n    return () => clearInterval(interval);\n  }, [rotating]);\n\n  // Tanklar sadece moving true ise ileri gider\n  useEffect(() => {\n    if (!gameStarted) return;\n    const interval = setInterval(() => {\n      setPlayers(prevPlayers => prevPlayers.map(player => {\n        if (moving[player.id]) {\n          const speed = 6;\n          let newX = player.position.x;\n          let newY = player.position.y;\n          let rad = player.rotation * Math.PI / 180;\n          const nextX = newX + Math.cos(rad) * speed;\n          const nextY = newY + Math.sin(rad) * speed;\n          const tankRect = {\n            x: nextX,\n            y: nextY,\n            w: tankSize,\n            h: tankSize\n          };\n          const collides = walls.some(wall => tankRect.x < wall.x + wall.w && tankRect.x + tankRect.w > wall.x && tankRect.y < wall.y + wall.h && tankRect.y + tankRect.h > wall.y);\n          if (!collides) {\n            newX = Math.max(0, Math.min(window.innerWidth - tankSize, nextX));\n            newY = Math.max(0, Math.min(window.innerHeight - tankSize, nextY));\n            return {\n              ...player,\n              position: {\n                x: newX,\n                y: newY\n              },\n              isMoving: true\n            };\n          } else {\n            return {\n              ...player,\n              isMoving: false\n            };\n          }\n        }\n        return {\n          ...player,\n          isMoving: false\n        };\n      }));\n    }, 16);\n    return () => clearInterval(interval);\n  }, [moving, tankSize, walls, gameStarted]);\n\n  // Butona tıklama: ateş et (mermi namlunun ucundan, doğru yöne çıkacak)\n  const handleCornerButtonClick = playerId => {\n    if (!gameStarted) return;\n    setPlayers(prevPlayers => {\n      const player = prevPlayers.find(p => p.id === playerId);\n      if (!player) return prevPlayers;\n      const rad = player.rotation * Math.PI / 180;\n      const centerX = player.position.x + tankSize / 2;\n      const centerY = player.position.y + tankSize / 2;\n      const offsetX = Math.cos(rad) * (tankSize / 2 + CANNON_LENGTH);\n      const offsetY = Math.sin(rad) * (tankSize / 2 + CANNON_LENGTH);\n      const bullet = {\n        id: Date.now() + Math.random(),\n        playerId,\n        position: {\n          x: centerX + offsetX - 4,\n          y: centerY + offsetY - 4\n        },\n        rotation: player.rotation,\n        bounces: 0\n      };\n      setBullets(prev => [...prev, bullet]);\n      return prevPlayers;\n    });\n  };\n\n  // Butona basılı tutma: hareket başlar, dönme durur\n  const handleCornerButtonDown = playerId => {\n    setRotating(r => ({\n      ...r,\n      [playerId]: false\n    }));\n    setMoving(m => ({\n      ...m,\n      [playerId]: true\n    }));\n  };\n\n  // Butondan el çekilince: hareket durur, dönme başlar\n  const handleCornerButtonUp = playerId => {\n    setRotating(r => ({\n      ...r,\n      [playerId]: true\n    }));\n    setMoving(m => ({\n      ...m,\n      [playerId]: false\n    }));\n  };\n\n  // Klavye kontrolleri: bilgisayar için dönme ve hareket mantığı\n  useEffect(() => {\n    if (deviceType !== 'computer') return;\n    const keyMap = {\n      'w': {\n        playerId: 1,\n        action: 'move'\n      },\n      'e': {\n        playerId: 1,\n        action: 'fire'\n      },\n      't': {\n        playerId: 2,\n        action: 'move'\n      },\n      'y': {\n        playerId: 2,\n        action: 'fire'\n      },\n      'i': {\n        playerId: 3,\n        action: 'move'\n      },\n      'o': {\n        playerId: 3,\n        action: 'fire'\n      },\n      'up': {\n        playerId: 4,\n        action: 'move'\n      },\n      'shift': {\n        playerId: 4,\n        action: 'fire'\n      }\n    };\n    const handleKeyDown = e => {\n      const key = e.key.toLowerCase();\n      const mapped = keyMap[key];\n      if (mapped) {\n        if (mapped.action === 'move') {\n          setRotating(r => ({\n            ...r,\n            [mapped.playerId]: false\n          }));\n          setMoving(m => ({\n            ...m,\n            [mapped.playerId]: true\n          }));\n        } else if (mapped.action === 'fire') {\n          handleCornerButtonClick(mapped.playerId);\n        }\n      }\n    };\n    const handleKeyUp = e => {\n      const key = e.key.toLowerCase();\n      const mapped = keyMap[key];\n      if (mapped && mapped.action === 'move') {\n        setRotating(r => ({\n          ...r,\n          [mapped.playerId]: true\n        }));\n        setMoving(m => ({\n          ...m,\n          [mapped.playerId]: false\n        }));\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [deviceType]);\n\n  // Buton simgesi tank olsun, yoksa simgesiz bırak\n  const TankButtonIcon = () => /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"36\",\n    height: \"24\",\n    viewBox: \"0 0 36 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n      x: \"4\",\n      y: \"8\",\n      width: \"20\",\n      height: \"8\",\n      rx: \"3\",\n      fill: \"#333\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n      x: \"24\",\n      y: \"11\",\n      width: \"8\",\n      height: \"2\",\n      rx: \"1\",\n      fill: \"#333\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n      cx: \"10\",\n      cy: \"20\",\n      r: \"3\",\n      fill: \"#333\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n      cx: \"20\",\n      cy: \"20\",\n      r: \"3\",\n      fill: \"#333\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 573,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(GameArea, {\n    children: [countdown !== null && /*#__PURE__*/_jsxDEV(CountdownOverlay, {\n      children: /*#__PURE__*/_jsxDEV(CountdownText, {\n        children: countdown === 0 ? 'Başla!' : countdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(GameGrid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 7\n    }, this), walls.map((w, i) => /*#__PURE__*/_jsxDEV(Wall, {\n      style: {\n        left: w.x,\n        top: w.y,\n        width: w.w,\n        height: w.h\n      }\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 9\n    }, this)), players.map(player => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(HealthBar, {\n        health: player.health,\n        color: playerColors[player.id],\n        style: {\n          left: player.position.x + 10,\n          top: player.position.y - 10\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Tank, {\n        color: playerColors[player.id],\n        rotation: player.rotation,\n        position: player.position,\n        isMoving: player.isMoving,\n        size: tankSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 11\n      }, this)]\n    }, player.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 9\n    }, this)), bullets.map(bullet => /*#__PURE__*/_jsxDEV(Bullet, {\n      rotation: bullet.rotation,\n      style: {\n        left: bullet.position.x,\n        top: bullet.position.y\n      }\n    }, bullet.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 9\n    }, this)), deviceType === 'phone' && players.map((player, idx) => /*#__PURE__*/_jsxDEV(CornerButton, {\n      color: playerColors[player.id],\n      position: cornerPositions[idx],\n      onClick: () => handleCornerButtonClick(player.id),\n      onTouchStart: () => handleCornerButtonDown(player.id),\n      onTouchEnd: () => handleCornerButtonUp(player.id),\n      onMouseDown: () => handleCornerButtonDown(player.id),\n      onMouseUp: () => handleCornerButtonUp(player.id),\n      onMouseLeave: () => handleCornerButtonUp(player.id),\n      children: /*#__PURE__*/_jsxDEV(TankButtonIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 11\n      }, this)\n    }, player.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 582,\n    columnNumber: 5\n  }, this);\n};\n_s(TankGame, \"idIhFswJTx1ReBVsD/5cLxXgv24=\");\n_c9 = TankGame;\nexport default TankGame;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"GameArea\");\n$RefreshReg$(_c2, \"GameGrid\");\n$RefreshReg$(_c3, \"Bullet\");\n$RefreshReg$(_c4, \"HealthBar\");\n$RefreshReg$(_c5, \"CornerButton\");\n$RefreshReg$(_c6, \"Wall\");\n$RefreshReg$(_c7, \"CountdownOverlay\");\n$RefreshReg$(_c8, \"CountdownText\");\n$RefreshReg$(_c9, \"TankGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","styled","Tank","jsxDEV","_jsxDEV","GameArea","div","_c","GameGrid","_c2","Grass","Bullet","props","rotation","_c3","HealthBar","health","color","_c4","Controls","ControlButton","button","FireButton","CornerButton","position","_c5","playerColors","cornerPositions","TANK_SIZE","CANNON_LENGTH","GRID_SIZE","GRID_COLS","Math","floor","window","innerWidth","GRID_ROWS","innerHeight","Wall","_c6","GrassPatch","CountdownOverlay","_c7","CountdownText","_c8","generateMaze","cols","rows","walls","y","x","random","push","w","h","TankGame","playerCount","deviceType","_s","players","setPlayers","bullets","setBullets","rotating","setRotating","moving","setMoving","activePlayer","setActivePlayer","setWalls","tankSize","setTankSize","countdown","setCountdown","gameStarted","setGameStarted","initialPlayers","Array","from","length","_","i","id","isMoving","movePlayer","playerId","direction","prevPlayers","map","player","speed","newX","newY","newRotation","max","min","fireBullet","find","p","rad","PI","offsetX","sin","offsetY","cos","bullet","Date","now","bounces","prev","maze","size","timer","setTimeout","c","clearTimeout","bulletInterval","setInterval","prevBullets","wall","filter","b","clearInterval","initialRotating","initialMoving","interval","nextX","nextY","tankRect","collides","some","handleCornerButtonClick","centerX","centerY","handleCornerButtonDown","r","m","handleCornerButtonUp","keyMap","action","handleKeyDown","e","key","toLowerCase","mapped","handleKeyUp","addEventListener","removeEventListener","TankButtonIcon","width","height","viewBox","fill","xmlns","children","rx","fileName","_jsxFileName","lineNumber","columnNumber","cx","cy","style","left","top","Fragment","idx","onClick","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","onMouseLeave","_c9","$RefreshReg$"],"sources":["/home/cesur/Documents/Projects/iki-kisilik-web/src/components/games/TankGame/TankGame.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport Tank from './Tank';\n\nconst GameArea = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: #d2b48c; // Çöl rengi\n  position: relative;\n  overflow: hidden;\n`;\n\nconst GameGrid = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-image: \n    linear-gradient(rgba(0, 0, 0, 0.1) 1px, transparent 1px),\n    linear-gradient(90deg, rgba(0, 0, 0, 0.1) 1px, transparent 1px);\n  background-size: 40px 40px;\n  pointer-events: none;\n`;\n\nconst Grass = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-image: url(\"data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M50 0 L100 50 L50 100 L0 50 Z' fill='%232ecc71' fill-opacity='0.1'/%3E%3C/svg%3E\");\n  background-size: 20px 20px;\n  pointer-events: none;\n`;\n\nconst Bullet = styled.div<{ rotation: number }>`\n  position: absolute;\n  width: 8px;\n  height: 8px;\n  background: #fff;\n  border-radius: 50%;\n  transform: rotate(${props => props.rotation}deg);\n  box-shadow: 0 0 5px rgba(255, 255, 255, 0.8);\n`;\n\nconst HealthBar = styled.div<{ health: number; color: string }>`\n  position: absolute;\n  width: 40px;\n  height: 4px;\n  background: rgba(0, 0, 0, 0.3);\n  border-radius: 2px;\n  overflow: hidden;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: ${props => props.health}%;\n    height: 100%;\n    background: ${props => props.color};\n    transition: width 0.3s ease;\n  }\n`;\n\nconst Controls = styled.div`\n  position: absolute;\n  bottom: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  display: flex;\n  gap: 20px;\n  z-index: 1;\n`;\n\nconst ControlButton = styled.button<{ color: string }>`\n  background: ${props => props.color};\n  border: none;\n  width: 50px;\n  height: 50px;\n  border-radius: 25px;\n  color: white;\n  font-size: 24px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  transition: all 0.2s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);\n  }\n\n  &:active {\n    transform: translateY(1px);\n  }\n`;\n\nconst FireButton = styled(ControlButton)`\n  background: #e74c3c;\n  width: 60px;\n  height: 60px;\n  font-size: 20px;\n`;\n\nconst CornerButton = styled.button<{ color: string; position: string }>`\n  position: absolute;\n  width: 90px;\n  height: 90px;\n  border-radius: 50%;\n  background: ${props => props.color};\n  color: #fff;\n  font-size: 2.5rem;\n  border: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 16px rgba(0,0,0,0.15);\n  z-index: 10;\n  cursor: pointer;\n  opacity: 0.95;\n  ${props => props.position === 'bottomLeft' && 'left: 30px; bottom: 30px;'}\n  ${props => props.position === 'bottomRight' && 'right: 30px; bottom: 30px;'}\n  ${props => props.position === 'topLeft' && 'left: 30px; top: 30px;'}\n  ${props => props.position === 'topRight' && 'right: 30px; top: 30px;'}\n`;\n\nconst playerColors: Record<1 | 2 | 3 | 4, string> = {\n  1: '#e74c3c', // Kırmızı\n  2: '#3498db', // Mavi\n  3: '#2ecc71', // Yeşil\n  4: '#f1c40f'  // Sarı\n};\n\ninterface Player {\n  id: number;\n  position: { x: number; y: number };\n  rotation: number;\n  health: number;\n  isMoving: boolean;\n}\n\ninterface Bullet {\n  id: number;\n  playerId: number;\n  position: { x: number; y: number };\n  rotation: number;\n  bounces: number;\n}\n\nconst cornerPositions = [\n  'bottomLeft', // 1. oyuncu\n  'bottomRight', // 2. oyuncu\n  'topLeft', // 3. oyuncu\n  'topRight' // 4. oyuncu\n] as const;\n\ntype CornerPosition = typeof cornerPositions[number];\n\nconst TANK_SIZE = 60;\nconst CANNON_LENGTH = 30;\nconst GRID_SIZE = 80; // Kare boyutu\nconst GRID_COLS = Math.floor(window.innerWidth / GRID_SIZE);\nconst GRID_ROWS = Math.floor(window.innerHeight / GRID_SIZE);\n\nconst Wall = styled.div`\n  position: absolute;\n  background: #e0e0e0;\n  border: 3px solid #bdbdbd;\n  box-sizing: border-box;\n  border-radius: 4px;\n`;\n\nconst GrassPatch = styled.div`\n  position: absolute;\n  width: 40px;\n  height: 40px;\n  background: radial-gradient(circle at 60% 40%, #4caf50 70%, #388e3c 100%);\n  border-radius: 50%;\n  opacity: 0.7;\n`;\n\nconst CountdownOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(0,0,0,0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n`;\n\nconst CountdownText = styled.div`\n  color: #fff;\n  font-size: 8rem;\n  font-weight: bold;\n  text-shadow: 0 0 40px #000, 0 0 10px #fff;\n  animation: pop 0.5s;\n  @keyframes pop {\n    0% { transform: scale(0.7); opacity: 0.5; }\n    60% { transform: scale(1.2); opacity: 1; }\n    100% { transform: scale(1); opacity: 1; }\n  }\n`;\n\n// Labirent için grid tabanlı duvarlar\nfunction generateMaze(cols: number, rows: number) {\n  // Basit bir maze algoritması (örnek: her satırda ve sütunda rastgele kısa kenarlı duvarlar)\n  const walls: { x: number; y: number; w: number; h: number }[] = [];\n  for (let y = 0; y < rows; y++) {\n    for (let x = 0; x < cols; x++) {\n      // Yatay duvar\n      if (Math.random() > 0.6 && x < cols - 1) {\n        walls.push({\n          x: x * GRID_SIZE,\n          y: y * GRID_SIZE,\n          w: GRID_SIZE,\n          h: 8\n        });\n      }\n      // Dikey duvar\n      if (Math.random() > 0.6 && y < rows - 1) {\n        walls.push({\n          x: x * GRID_SIZE,\n          y: y * GRID_SIZE,\n          w: 8,\n          h: GRID_SIZE\n        });\n      }\n    }\n  }\n  // Kenar duvarları\n  walls.push({ x: 0, y: 0, w: cols * GRID_SIZE, h: 8 }); // üst\n  walls.push({ x: 0, y: rows * GRID_SIZE - 8, w: cols * GRID_SIZE, h: 8 }); // alt\n  walls.push({ x: 0, y: 0, w: 8, h: rows * GRID_SIZE }); // sol\n  walls.push({ x: cols * GRID_SIZE - 8, y: 0, w: 8, h: rows * GRID_SIZE }); // sağ\n  return walls;\n}\n\nconst TankGame: React.FC<{ \n  playerCount: number;\n  deviceType: 'computer' | 'phone';\n}> = ({ playerCount, deviceType }) => {\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [bullets, setBullets] = useState<Bullet[]>([]);\n  const [rotating, setRotating] = useState<{ [id: number]: boolean }>({});\n  const [moving, setMoving] = useState<{ [id: number]: boolean }>({});\n  const [activePlayer, setActivePlayer] = useState<1 | 2 | 3 | 4>(1);\n  const [walls, setWalls] = useState<{ x: number; y: number; w: number; h: number }[]>([]);\n  const [tankSize, setTankSize] = useState<number>(60);\n  const [countdown, setCountdown] = useState<number | null>(3);\n  const [gameStarted, setGameStarted] = useState<boolean>(false);\n\n  useEffect(() => {\n    const initialPlayers: Player[] = Array.from({ length: playerCount }, (_, i) => ({\n      id: i + 1,\n      position: {\n        x: window.innerWidth / (playerCount + 1) * (i + 1),\n        y: window.innerHeight / 2\n      },\n      rotation: 0,\n      health: 100,\n      isMoving: false\n    }));\n    setPlayers(initialPlayers);\n  }, [playerCount]);\n\n  const movePlayer = useCallback((playerId: number, direction: 'up' | 'down' | 'left' | 'right') => {\n    setPlayers(prevPlayers => \n      prevPlayers.map(player => {\n        if (player.id === playerId) {\n          const speed = 5;\n          let newX = player.position.x;\n          let newY = player.position.y;\n          let newRotation = player.rotation;\n\n          switch (direction) {\n            case 'up':\n              newY -= speed;\n              newRotation = 0;\n              break;\n            case 'down':\n              newY += speed;\n              newRotation = 180;\n              break;\n            case 'left':\n              newX -= speed;\n              newRotation = 270;\n              break;\n            case 'right':\n              newX += speed;\n              newRotation = 90;\n              break;\n          }\n\n          // Sınırları kontrol et\n          newX = Math.max(0, Math.min(window.innerWidth - 60, newX));\n          newY = Math.max(0, Math.min(window.innerHeight - 60, newY));\n\n          return {\n            ...player,\n            position: { x: newX, y: newY },\n            rotation: newRotation,\n            isMoving: true\n          };\n        }\n        return {\n          ...player,\n          isMoving: false\n        };\n      })\n    );\n  }, []);\n\n  const fireBullet = useCallback((playerId: number) => {\n    const player = players.find(p => p.id === playerId);\n    if (!player) return;\n\n    const rad = player.rotation * Math.PI / 180;\n    // Tankın merkezinden namlu ucuna offset\n    const offsetX = Math.sin(rad) * (TANK_SIZE / 2 + CANNON_LENGTH / 2);\n    const offsetY = -Math.cos(rad) * (TANK_SIZE / 2 + CANNON_LENGTH / 2);\n    const bullet: Bullet = {\n      id: Date.now() + Math.random(),\n      playerId,\n      position: {\n        x: player.position.x + TANK_SIZE / 2 + offsetX - 4, // 4: mermi yarıçapı\n        y: player.position.y + TANK_SIZE / 2 + offsetY - 4\n      },\n      rotation: player.rotation,\n      bounces: 0\n    };\n\n    setBullets(prev => [...prev, bullet]);\n  }, [players]);\n\n  // Maze oluştur ve tank boyutunu ayarla\n  useEffect(() => {\n    const maze = generateMaze(GRID_COLS, GRID_ROWS);\n    setWalls(maze);\n    let size = 60;\n    if (maze.length > 60) size = 36;\n    else if (maze.length > 40) size = 44;\n    else if (maze.length > 25) size = 52;\n    setTankSize(size);\n  }, []);\n\n  // Geri sayım başlat\n  useEffect(() => {\n    setCountdown(3);\n    setGameStarted(false);\n  }, [playerCount]);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (countdown !== null) {\n      if (countdown > 0) {\n        timer = setTimeout(() => setCountdown((c) => (c !== null ? c - 1 : null)), 1000);\n      } else if (countdown === 0) {\n        timer = setTimeout(() => {\n          setCountdown(null);\n          setGameStarted(true);\n        }, 800);\n      }\n    }\n    return () => clearTimeout(timer);\n  }, [countdown]);\n\n  // Mermiler düz gitsin ve sekme efektiyle yön değiştirsin, 3 sekmeden sonra kaybolsun\n  useEffect(() => {\n    const bulletInterval = setInterval(() => {\n      setBullets(prevBullets => {\n        return prevBullets\n          .map(bullet => {\n            let speed = 10;\n            let rad = bullet.rotation * Math.PI / 180;\n            let newX = bullet.position.x + Math.cos(rad) * speed;\n            let newY = bullet.position.y + Math.sin(rad) * speed;\n            let newRotation = bullet.rotation;\n            let bounces = bullet.bounces;\n            // Sınırdan sekme\n            if (newX < 0 || newX > window.innerWidth - 8) {\n              newRotation = 180 - newRotation;\n              bounces++;\n            }\n            if (newY < 0 || newY > window.innerHeight - 8) {\n              newRotation = 360 - newRotation;\n              bounces++;\n            }\n            // Duvarlardan sekme\n            for (const wall of walls) {\n              if (\n                newX + 8 > wall.x && newX < wall.x + wall.w &&\n                newY + 8 > wall.y && newY < wall.y + wall.h\n              ) {\n                // Yatay mı dikey mi?\n                if (wall.w > wall.h) {\n                  newRotation = 360 - newRotation;\n                } else {\n                  newRotation = 180 - newRotation;\n                }\n                bounces++;\n                break;\n              }\n            }\n            if (bounces >= 3) return null;\n            return {\n              ...bullet,\n              position: { x: newX, y: newY },\n              rotation: newRotation,\n              bounces\n            };\n          })\n          .filter((b): b is Bullet => b !== null);\n      });\n    }, 16);\n    return () => clearInterval(bulletInterval);\n  }, [walls]);\n\n  // Başlangıçta tanklar dönüyor, hareket etmiyor\n  useEffect(() => {\n    const initialRotating: { [id: number]: boolean } = {};\n    const initialMoving: { [id: number]: boolean } = {};\n    for (let i = 1; i <= playerCount; i++) {\n      initialRotating[i] = true;\n      initialMoving[i] = false;\n    }\n    setRotating(initialRotating);\n    setMoving(initialMoving);\n  }, [playerCount]);\n\n  // Tanklar sadece rotating true ise döner\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setPlayers(prevPlayers => prevPlayers.map(player => {\n        if (rotating[player.id]) {\n          return {\n            ...player,\n            rotation: player.rotation + 2 // Sürekli artar, sıfırlanmaz\n          };\n        }\n        return player;\n      }));\n    }, 30);\n    return () => clearInterval(interval);\n  }, [rotating]);\n\n  // Tanklar sadece moving true ise ileri gider\n  useEffect(() => {\n    if (!gameStarted) return;\n    const interval = setInterval(() => {\n      setPlayers(prevPlayers => prevPlayers.map(player => {\n        if (moving[player.id]) {\n          const speed = 6;\n          let newX = player.position.x;\n          let newY = player.position.y;\n          let rad = player.rotation * Math.PI / 180;\n          const nextX = newX + Math.cos(rad) * speed;\n          const nextY = newY + Math.sin(rad) * speed;\n          const tankRect = {\n            x: nextX,\n            y: nextY,\n            w: tankSize,\n            h: tankSize\n          };\n          const collides = walls.some(wall =>\n            tankRect.x < wall.x + wall.w &&\n            tankRect.x + tankRect.w > wall.x &&\n            tankRect.y < wall.y + wall.h &&\n            tankRect.y + tankRect.h > wall.y\n          );\n          if (!collides) {\n            newX = Math.max(0, Math.min(window.innerWidth - tankSize, nextX));\n            newY = Math.max(0, Math.min(window.innerHeight - tankSize, nextY));\n            return {\n              ...player,\n              position: { x: newX, y: newY },\n              isMoving: true\n            };\n          } else {\n            return { ...player, isMoving: false };\n          }\n        }\n        return { ...player, isMoving: false };\n      }));\n    }, 16);\n    return () => clearInterval(interval);\n  }, [moving, tankSize, walls, gameStarted]);\n\n  // Butona tıklama: ateş et (mermi namlunun ucundan, doğru yöne çıkacak)\n  const handleCornerButtonClick = (playerId: number) => {\n    if (!gameStarted) return;\n    setPlayers(prevPlayers => {\n      const player = prevPlayers.find(p => p.id === playerId);\n      if (!player) return prevPlayers;\n      const rad = player.rotation * Math.PI / 180;\n      const centerX = player.position.x + tankSize / 2;\n      const centerY = player.position.y + tankSize / 2;\n      const offsetX = Math.cos(rad) * (tankSize / 2 + CANNON_LENGTH);\n      const offsetY = Math.sin(rad) * (tankSize / 2 + CANNON_LENGTH);\n      const bullet: Bullet = {\n        id: Date.now() + Math.random(),\n        playerId,\n        position: {\n          x: centerX + offsetX - 4,\n          y: centerY + offsetY - 4\n        },\n        rotation: player.rotation,\n        bounces: 0\n      };\n      setBullets(prev => [...prev, bullet]);\n      return prevPlayers;\n    });\n  };\n\n  // Butona basılı tutma: hareket başlar, dönme durur\n  const handleCornerButtonDown = (playerId: number) => {\n    setRotating(r => ({ ...r, [playerId]: false }));\n    setMoving(m => ({ ...m, [playerId]: true }));\n  };\n\n  // Butondan el çekilince: hareket durur, dönme başlar\n  const handleCornerButtonUp = (playerId: number) => {\n    setRotating(r => ({ ...r, [playerId]: true }));\n    setMoving(m => ({ ...m, [playerId]: false }));\n  };\n\n  // Klavye kontrolleri: bilgisayar için dönme ve hareket mantığı\n  useEffect(() => {\n    if (deviceType !== 'computer') return;\n    const keyMap: { [key: string]: { playerId: number; action: 'move' | 'fire' } } = {\n      'w': { playerId: 1, action: 'move' },\n      'e': { playerId: 1, action: 'fire' },\n      't': { playerId: 2, action: 'move' },\n      'y': { playerId: 2, action: 'fire' },\n      'i': { playerId: 3, action: 'move' },\n      'o': { playerId: 3, action: 'fire' },\n      'up': { playerId: 4, action: 'move' },\n      'shift': { playerId: 4, action: 'fire' }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const key = e.key.toLowerCase();\n      const mapped = keyMap[key];\n      if (mapped) {\n        if (mapped.action === 'move') {\n          setRotating(r => ({ ...r, [mapped.playerId]: false }));\n          setMoving(m => ({ ...m, [mapped.playerId]: true }));\n        } else if (mapped.action === 'fire') {\n          handleCornerButtonClick(mapped.playerId);\n        }\n      }\n    };\n    const handleKeyUp = (e: KeyboardEvent) => {\n      const key = e.key.toLowerCase();\n      const mapped = keyMap[key];\n      if (mapped && mapped.action === 'move') {\n        setRotating(r => ({ ...r, [mapped.playerId]: true }));\n        setMoving(m => ({ ...m, [mapped.playerId]: false }));\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [deviceType]);\n\n  // Buton simgesi tank olsun, yoksa simgesiz bırak\n  const TankButtonIcon = () => (\n    <svg width=\"36\" height=\"24\" viewBox=\"0 0 36 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect x=\"4\" y=\"8\" width=\"20\" height=\"8\" rx=\"3\" fill=\"#333\" />\n      <rect x=\"24\" y=\"11\" width=\"8\" height=\"2\" rx=\"1\" fill=\"#333\" />\n      <circle cx=\"10\" cy=\"20\" r=\"3\" fill=\"#333\" />\n      <circle cx=\"20\" cy=\"20\" r=\"3\" fill=\"#333\" />\n    </svg>\n  );\n\n  return (\n    <GameArea>\n      {countdown !== null && (\n        <CountdownOverlay>\n          <CountdownText>\n            {countdown === 0 ? 'Başla!' : countdown}\n          </CountdownText>\n        </CountdownOverlay>\n      )}\n      <GameGrid />\n      {/* Duvarlar */}\n      {walls.map((w, i) => (\n        <Wall key={i} style={{ left: w.x, top: w.y, width: w.w, height: w.h }} />\n      ))}\n      {players.map(player => (\n        <React.Fragment key={player.id}>\n          <HealthBar \n            health={player.health}\n            color={playerColors[player.id as 1 | 2 | 3 | 4]}\n            style={{\n              left: player.position.x + 10,\n              top: player.position.y - 10\n            }}\n          />\n          <Tank\n            color={playerColors[player.id as 1 | 2 | 3 | 4]}\n            rotation={player.rotation}\n            position={player.position}\n            isMoving={player.isMoving}\n            size={tankSize}\n          />\n        </React.Fragment>\n      ))}\n      {bullets.map(bullet => (\n        <Bullet\n          key={bullet.id}\n          rotation={bullet.rotation}\n          style={{\n            left: bullet.position.x,\n            top: bullet.position.y\n          }}\n        />\n      ))}\n      {deviceType === 'phone' && players.map((player, idx) => (\n        <CornerButton\n          key={player.id}\n          color={playerColors[player.id as 1 | 2 | 3 | 4]}\n          position={cornerPositions[idx]}\n          onClick={() => handleCornerButtonClick(player.id)}\n          onTouchStart={() => handleCornerButtonDown(player.id)}\n          onTouchEnd={() => handleCornerButtonUp(player.id)}\n          onMouseDown={() => handleCornerButtonDown(player.id)}\n          onMouseUp={() => handleCornerButtonUp(player.id)}\n          onMouseLeave={() => handleCornerButtonUp(player.id)}\n        >\n          <TankButtonIcon />\n        </CornerButton>\n      ))}\n    </GameArea>\n  );\n};\n\nexport default TankGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}