{"ast":null,"code":"var _jsxFileName = \"/home/cesur/Documents/Projects/iki-kisilik-web/src/components/games/TankGame/TankGame.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled from 'styled-components';\nimport Tank from './Tank';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameArea = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: #d2b48c; // Çöl rengi\n  position: relative;\n  overflow: hidden;\n`;\n_c = GameArea;\nconst GameGrid = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-image: \n    linear-gradient(rgba(0, 0, 0, 0.1) 1px, transparent 1px),\n    linear-gradient(90deg, rgba(0, 0, 0, 0.1) 1px, transparent 1px);\n  background-size: 40px 40px;\n  pointer-events: none;\n`;\n_c2 = GameGrid;\nconst Grass = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-image: url(\"data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M50 0 L100 50 L50 100 L0 50 Z' fill='%232ecc71' fill-opacity='0.1'/%3E%3C/svg%3E\");\n  background-size: 20px 20px;\n  pointer-events: none;\n`;\nconst Bullet = styled.div`\n  position: absolute;\n  width: ${props => props.size}px;\n  height: ${props => props.size}px;\n  background: #222;\n  border-radius: 50%;\n  box-shadow: 0 0 6px #000a;\n`;\n_c3 = Bullet;\nconst Smoke = styled.div`\n  position: absolute;\n  width: ${props => props.size}px;\n  height: ${props => props.size}px;\n  background: #888;\n  border-radius: 50%;\n  opacity: ${props => props.opacity};\n  pointer-events: none;\n`;\n_c4 = Smoke;\nconst HealthBar = styled.div`\n  position: absolute;\n  width: 40px;\n  height: 4px;\n  background: rgba(0, 0, 0, 0.3);\n  border-radius: 2px;\n  overflow: hidden;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: ${props => props.health}%;\n    height: 100%;\n    background: ${props => props.color};\n    transition: width 0.3s ease;\n  }\n`;\n_c5 = HealthBar;\nconst Controls = styled.div`\n  position: absolute;\n  bottom: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  display: flex;\n  gap: 20px;\n  z-index: 1;\n`;\nconst ControlButton = styled.button`\n  background: ${props => props.color};\n  border: none;\n  width: 50px;\n  height: 50px;\n  border-radius: 25px;\n  color: white;\n  font-size: 24px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  transition: all 0.2s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);\n  }\n\n  &:active {\n    transform: translateY(1px);\n  }\n`;\nconst FireButton = styled(ControlButton)`\n  background: #e74c3c;\n  width: 60px;\n  height: 60px;\n  font-size: 20px;\n`;\nconst CornerButton = styled.button`\n  position: absolute;\n  width: 90px;\n  height: 90px;\n  border-radius: 50%;\n  background: ${props => props.color};\n  color: #fff;\n  font-size: 2.5rem;\n  border: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 16px rgba(0,0,0,0.15);\n  z-index: 10;\n  cursor: pointer;\n  opacity: 0.95;\n  ${props => props.position === 'bottomLeft' && 'left: 30px; bottom: 30px;'}\n  ${props => props.position === 'bottomRight' && 'right: 30px; bottom: 30px;'}\n  ${props => props.position === 'topLeft' && 'left: 30px; top: 30px;'}\n  ${props => props.position === 'topRight' && 'right: 30px; top: 30px;'}\n`;\n_c6 = CornerButton;\nconst playerColors = {\n  1: '#e74c3c',\n  // Kırmızı\n  2: '#3498db',\n  // Mavi\n  3: '#2ecc71',\n  // Yeşil\n  4: '#f1c40f' // Sarı\n};\nconst cornerPositions = ['bottomLeft',\n// 1. oyuncu\n'bottomRight',\n// 2. oyuncu\n'topLeft',\n// 3. oyuncu\n'topRight' // 4. oyuncu\n];\nconst TANK_SIZE = 60;\nconst CANNON_LENGTH = 30;\nconst GRID_SIZE = 80; // Kare boyutu\nconst GRID_COLS = Math.floor(window.innerWidth / GRID_SIZE);\nconst GRID_ROWS = Math.floor(window.innerHeight / GRID_SIZE);\nconst Wall = styled.div`\n  position: absolute;\n  background: #e0e0e0;\n  border: 3px solid #bdbdbd;\n  box-sizing: border-box;\n  border-radius: 4px;\n`;\n_c7 = Wall;\nconst GrassPatch = styled.div`\n  position: absolute;\n  width: 40px;\n  height: 40px;\n  background: radial-gradient(circle at 60% 40%, #4caf50 70%, #388e3c 100%);\n  border-radius: 50%;\n  opacity: 0.7;\n`;\nconst CountdownOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(0,0,0,0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n`;\n_c8 = CountdownOverlay;\nconst CountdownText = styled.div`\n  color: #fff;\n  font-size: 8rem;\n  font-weight: bold;\n  text-shadow: 0 0 40px #000, 0 0 10px #fff;\n  animation: pop 0.5s;\n  @keyframes pop {\n    0% { transform: scale(0.7); opacity: 0.5; }\n    60% { transform: scale(1.2); opacity: 1; }\n    100% { transform: scale(1); opacity: 1; }\n  }\n`;\n_c9 = CountdownText;\nconst WinOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(0,0,0,0.7);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: 2000;\n`;\n_c0 = WinOverlay;\nconst WinText = styled.div`\n  color: #fff;\n  font-size: 4rem;\n  font-weight: bold;\n  margin-bottom: 2rem;\n  text-shadow: 0 0 30px #000, 0 0 10px #fff;\n`;\n_c1 = WinText;\nconst ScoreTable = styled.div`\n  background: rgba(255,255,255,0.1);\n  border-radius: 12px;\n  padding: 2rem 3rem;\n  color: #fff;\n  font-size: 1.5rem;\n  box-shadow: 0 0 20px #0008;\n`;\n_c10 = ScoreTable;\nconst BULLET_SIZE = 8;\nconst SMOKE_SIZE = 18;\n\n// Labirent için grid tabanlı duvarlar\nfunction generateMaze(cols, rows) {\n  // Basit bir maze algoritması (örnek: her satırda ve sütunda rastgele kısa kenarlı duvarlar)\n  const walls = [];\n  for (let y = 0; y < rows; y++) {\n    for (let x = 0; x < cols; x++) {\n      // Yatay duvar\n      if (Math.random() > 0.6 && x < cols - 1) {\n        walls.push({\n          x: x * GRID_SIZE,\n          y: y * GRID_SIZE,\n          w: GRID_SIZE,\n          h: 8\n        });\n      }\n      // Dikey duvar\n      if (Math.random() > 0.6 && y < rows - 1) {\n        walls.push({\n          x: x * GRID_SIZE,\n          y: y * GRID_SIZE,\n          w: 8,\n          h: GRID_SIZE\n        });\n      }\n    }\n  }\n  // Kenar duvarları\n  walls.push({\n    x: 0,\n    y: 0,\n    w: cols * GRID_SIZE,\n    h: 8\n  }); // üst\n  walls.push({\n    x: 0,\n    y: rows * GRID_SIZE - 8,\n    w: cols * GRID_SIZE,\n    h: 8\n  }); // alt\n  walls.push({\n    x: 0,\n    y: 0,\n    w: 8,\n    h: rows * GRID_SIZE\n  }); // sol\n  walls.push({\n    x: cols * GRID_SIZE - 8,\n    y: 0,\n    w: 8,\n    h: rows * GRID_SIZE\n  }); // sağ\n  return walls;\n}\nconst TankGame = ({\n  playerCount,\n  deviceType\n}) => {\n  _s();\n  const [players, setPlayers] = useState([]);\n  const [bullets, setBullets] = useState([]);\n  const bulletsRef = useRef(bullets);\n  const [rotating, setRotating] = useState({});\n  const [moving, setMoving] = useState({});\n  const [activePlayer, setActivePlayer] = useState(1);\n  const [walls, setWalls] = useState([]);\n  const [tankSize, setTankSize] = useState(60);\n  const [countdown, setCountdown] = useState(3);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [smoke, setSmoke] = useState([]);\n  const [bulletsToRemove, setBulletsToRemove] = useState([]);\n\n  // Rastgele pozisyon oluşturma fonksiyonu\n  const getRandomPosition = () => {\n    const margin = 100; // Kenarlardan uzaklık\n    return {\n      x: margin + Math.random() * (window.innerWidth - 2 * margin),\n      y: margin + Math.random() * (window.innerHeight - 2 * margin)\n    };\n  };\n\n  // Oyunu başlatma fonksiyonu\n  const initializeGame = useCallback(() => {\n    // Yeni labirent oluştur\n    const maze = generateMaze(GRID_COLS, GRID_ROWS);\n    setWalls(maze);\n\n    // Tank boyutunu ayarla\n    let size = 60;\n    if (maze.length > 60) size = 36;else if (maze.length > 40) size = 44;else if (maze.length > 25) size = 52;\n    setTankSize(size);\n\n    // Oyuncuları rastgele pozisyonlara yerleştir\n    const initialPlayers = Array.from({\n      length: playerCount\n    }, (_, i) => ({\n      id: i + 1,\n      position: getRandomPosition(),\n      rotation: Math.random() * 360,\n      // Rastgele başlangıç rotasyonu\n      health: 3,\n      isMoving: false,\n      alive: true,\n      score: 0\n    }));\n    setPlayers(initialPlayers);\n  }, [playerCount]);\n\n  // Oyun başladığında ve yeniden başlatıldığında initializeGame'i çağır\n  useEffect(() => {\n    initializeGame();\n  }, [initializeGame]);\n  const movePlayer = useCallback((playerId, direction) => {\n    setPlayers(prevPlayers => {\n      return prevPlayers.map(player => {\n        if (player.id === playerId) {\n          const speed = 2; // Tank hızını yavaşlattık\n          let newX = player.position.x;\n          let newY = player.position.y;\n          let newRotation = player.rotation;\n          switch (direction) {\n            case 'up':\n              newY -= speed;\n              newRotation = 0;\n              break;\n            case 'down':\n              newY += speed;\n              newRotation = 180;\n              break;\n            case 'left':\n              newX -= speed;\n              newRotation = 270;\n              break;\n            case 'right':\n              newX += speed;\n              newRotation = 90;\n              break;\n          }\n\n          // Duvarlarla çarpışma kontrolü\n          const playerRect = {\n            x: newX - tankSize / 2,\n            y: newY - tankSize / 2,\n            w: tankSize,\n            h: tankSize\n          };\n          const hasCollision = walls.some(wall => {\n            return !(playerRect.x + playerRect.w < wall.x || playerRect.x > wall.x + wall.w || playerRect.y + playerRect.h < wall.y || playerRect.y > wall.y + wall.h);\n          });\n          if (hasCollision) {\n            return player;\n          }\n\n          // Ekran sınırları kontrolü\n          newX = Math.max(tankSize / 2, Math.min(window.innerWidth - tankSize / 2, newX));\n          newY = Math.max(tankSize / 2, Math.min(window.innerHeight - tankSize / 2, newY));\n          return {\n            ...player,\n            position: {\n              x: newX,\n              y: newY\n            },\n            rotation: newRotation\n          };\n        }\n        return player;\n      });\n    });\n  }, [tankSize, walls]);\n\n  // Mermi atma fonksiyonu\n  const fireBullet = useCallback(playerId => {\n    const player = players.find(p => p.id === playerId);\n    if (!player) return;\n    const bulletSpeed = 8;\n    const bulletSize = tankSize / 4;\n    let bulletX = player.position.x;\n    let bulletY = player.position.y;\n    let bulletVX = 0;\n    let bulletVY = 0;\n\n    // Mermi yönünü hesapla\n    switch (player.rotation) {\n      case 0:\n        // Yukarı\n        bulletY -= tankSize / 2;\n        bulletVY = -bulletSpeed;\n        break;\n      case 180:\n        // Aşağı\n        bulletY += tankSize / 2;\n        bulletVY = bulletSpeed;\n        break;\n      case 270:\n        // Sol\n        bulletX -= tankSize / 2;\n        bulletVX = -bulletSpeed;\n        break;\n      case 90:\n        // Sağ\n        bulletX += tankSize / 2;\n        bulletVX = bulletSpeed;\n        break;\n    }\n    const bullet = {\n      id: Date.now(),\n      playerId,\n      position: {\n        x: bulletX,\n        y: bulletY\n      },\n      rotation: player.rotation,\n      bounces: 0\n    };\n    setBullets(prev => [...prev, bullet]);\n  }, [players, tankSize]);\n\n  // Geri sayım başlat\n  useEffect(() => {\n    setCountdown(3);\n    setGameStarted(false);\n  }, [playerCount]);\n  useEffect(() => {\n    let timer;\n    if (countdown !== null) {\n      if (countdown > 0) {\n        timer = setTimeout(() => setCountdown(c => c !== null ? c - 1 : null), 1000);\n      } else if (countdown === 0) {\n        timer = setTimeout(() => {\n          setCountdown(null);\n          setGameStarted(true);\n        }, 800);\n      }\n    }\n    return () => clearTimeout(timer);\n  }, [countdown]);\n  useEffect(() => {\n    bulletsRef.current = bullets;\n  }, [bullets]);\n\n  // Mermiler 6 kez sekince kaybolsun ve çarpışanlar silinsin\n  useEffect(() => {\n    const bulletInterval = setInterval(() => {\n      setBullets(prevBullets => {\n        const currentBullets = bulletsRef.current;\n        return currentBullets.map(bullet => {\n          let speed = 10;\n          let rad = bullet.rotation * Math.PI / 180;\n          let newX = bullet.position.x + Math.cos(rad) * speed;\n          let newY = bullet.position.y + Math.sin(rad) * speed;\n          let newRotation = bullet.rotation;\n          let bounces = bullet.bounces;\n          if (newX < 0 || newX > window.innerWidth - BULLET_SIZE) {\n            newRotation = 180 - newRotation;\n            bounces++;\n          }\n          if (newY < 0 || newY > window.innerHeight - BULLET_SIZE) {\n            newRotation = 360 - newRotation;\n            bounces++;\n          }\n          for (const wall of walls) {\n            if (newX + BULLET_SIZE > wall.x && newX < wall.x + wall.w && newY + BULLET_SIZE > wall.y && newY < wall.y + wall.h) {\n              if (wall.w > wall.h) {\n                newRotation = 360 - newRotation;\n              } else {\n                newRotation = 180 - newRotation;\n              }\n              bounces++;\n              break;\n            }\n          }\n          if (bounces >= 6) return null;\n          return {\n            ...bullet,\n            rotation: newRotation,\n            bounces\n          };\n        }).filter(b => b !== null).filter(bullet => !bulletsToRemove.includes(bullet.id));\n      });\n      setBulletsToRemove([]);\n    }, 16);\n    return () => clearInterval(bulletInterval);\n  }, [walls, gameStarted, bulletsToRemove]);\n\n  // Tank hareket ediyorsa arkasında duman efekti bırak\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSmoke(prevSmoke => {\n        let newSmoke = [...prevSmoke];\n        players.forEach(player => {\n          if (player.isMoving && player.alive) {\n            const rad = player.rotation * Math.PI / 180;\n            // Duman tankın arkasında çıksın\n            const x = player.position.x + tankSize / 2 - Math.cos(rad) * (tankSize / 2 + 8) - SMOKE_SIZE / 2;\n            const y = player.position.y + tankSize / 2 - Math.sin(rad) * (tankSize / 2 + 8) - SMOKE_SIZE / 2;\n            newSmoke.push({\n              id: Date.now() + Math.random(),\n              x,\n              y,\n              opacity: 0.7,\n              size: SMOKE_SIZE\n            });\n          }\n        });\n        // Dumanları yavaşça sil\n        newSmoke = newSmoke.map(s => ({\n          ...s,\n          opacity: s.opacity - 0.04\n        })).filter(s => s.opacity > 0);\n        return newSmoke;\n      });\n    }, 40);\n    return () => clearInterval(interval);\n  }, [players, tankSize]);\n\n  // Başlangıçta tanklar dönüyor, hareket etmiyor\n  useEffect(() => {\n    const initialRotating = {};\n    const initialMoving = {};\n    for (let i = 1; i <= playerCount; i++) {\n      initialRotating[i] = true;\n      initialMoving[i] = false;\n    }\n    setRotating(initialRotating);\n    setMoving(initialMoving);\n  }, [playerCount]);\n\n  // Tanklar sadece rotating true ise döner (daha hızlı dönsün)\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setPlayers(prevPlayers => prevPlayers.map(player => {\n        if (rotating[player.id]) {\n          return {\n            ...player,\n            rotation: player.rotation + 6 // Daha hızlı dönsün\n          };\n        }\n        return player;\n      }));\n    }, 30);\n    return () => clearInterval(interval);\n  }, [rotating]);\n\n  // Tanklar sadece moving true ise ileri gider\n  useEffect(() => {\n    if (!gameStarted) return;\n    const interval = setInterval(() => {\n      setPlayers(prevPlayers => prevPlayers.map(player => {\n        if (moving[player.id]) {\n          const speed = 6;\n          let newX = player.position.x;\n          let newY = player.position.y;\n          let rad = player.rotation * Math.PI / 180;\n          const nextX = newX + Math.cos(rad) * speed;\n          const nextY = newY + Math.sin(rad) * speed;\n          const tankRect = {\n            x: nextX,\n            y: nextY,\n            w: tankSize,\n            h: tankSize\n          };\n          const collides = walls.some(wall => tankRect.x < wall.x + wall.w && tankRect.x + tankRect.w > wall.x && tankRect.y < wall.y + wall.h && tankRect.y + tankRect.h > wall.y);\n          if (!collides) {\n            newX = Math.max(0, Math.min(window.innerWidth - tankSize, nextX));\n            newY = Math.max(0, Math.min(window.innerHeight - tankSize, nextY));\n            return {\n              ...player,\n              position: {\n                x: newX,\n                y: newY\n              },\n              isMoving: true\n            };\n          } else {\n            return {\n              ...player,\n              isMoving: false\n            };\n          }\n        }\n        return {\n          ...player,\n          isMoving: false\n        };\n      }));\n    }, 16);\n    return () => clearInterval(interval);\n  }, [moving, tankSize, walls, gameStarted]);\n\n  // Mermi-tank çarpışması: tek vuruşta patlama\n  useEffect(() => {\n    if (!gameStarted) return;\n    setPlayers(prevPlayers => {\n      let updatedPlayers = [...prevPlayers];\n      let removeBullets = [];\n      bullets.forEach(bullet => {\n        for (let i = 0; i < updatedPlayers.length; i++) {\n          const player = updatedPlayers[i];\n          if (!player.alive || bullet.playerId === player.id) continue;\n          const tankRect = {\n            x: player.position.x,\n            y: player.position.y,\n            w: tankSize,\n            h: tankSize\n          };\n          const bulletRect = {\n            x: bullet.position.x,\n            y: bullet.position.y,\n            w: BULLET_SIZE,\n            h: BULLET_SIZE\n          };\n          const hit = tankRect.x < bulletRect.x + bulletRect.w && tankRect.x + tankRect.w > bulletRect.x && tankRect.y < bulletRect.y + bulletRect.h && tankRect.y + tankRect.h > bulletRect.y;\n          if (hit) {\n            updatedPlayers[i] = {\n              ...player,\n              alive: false\n            };\n            removeBullets.push(bullet.id);\n          }\n        }\n      });\n      setBulletsToRemove(removeBullets);\n      // Kazananı kontrol et\n      const alivePlayers = updatedPlayers.filter(p => p.alive);\n      if (alivePlayers.length === 1 && winner === null) {\n        setWinner(alivePlayers[0].id);\n        updatedPlayers = updatedPlayers.map(p => p.id === alivePlayers[0].id ? {\n          ...p,\n          score: p.score + 1\n        } : p);\n      }\n      return updatedPlayers;\n    });\n  }, [bullets, gameStarted, tankSize, winner]);\n\n  // Butona tıklama: ateş et (mermi namlunun ucundan, doğru yöne çıkacak)\n  const handleCornerButtonClick = playerId => {\n    if (!gameStarted) return;\n    setPlayers(prevPlayers => {\n      const player = prevPlayers.find(p => p.id === playerId);\n      if (!player) return prevPlayers;\n      const rad = player.rotation * Math.PI / 180;\n      const centerX = player.position.x + tankSize / 2;\n      const centerY = player.position.y + tankSize / 2;\n      const offsetX = Math.cos(rad) * (tankSize / 2 + CANNON_LENGTH);\n      const offsetY = Math.sin(rad) * (tankSize / 2 + CANNON_LENGTH);\n      const bullet = {\n        id: Date.now() + Math.random(),\n        playerId,\n        position: {\n          x: centerX + offsetX - 4,\n          y: centerY + offsetY - 4\n        },\n        rotation: player.rotation,\n        bounces: 0\n      };\n      setBullets(prev => [...prev, bullet]);\n      return prevPlayers;\n    });\n  };\n\n  // Butona basılı tutma: hareket başlar, dönme durur\n  const handleCornerButtonDown = playerId => {\n    setRotating(r => ({\n      ...r,\n      [playerId]: false\n    }));\n    setMoving(m => ({\n      ...m,\n      [playerId]: true\n    }));\n  };\n\n  // Butondan el çekilince: hareket durur, dönme başlar\n  const handleCornerButtonUp = playerId => {\n    setRotating(r => ({\n      ...r,\n      [playerId]: true\n    }));\n    setMoving(m => ({\n      ...m,\n      [playerId]: false\n    }));\n  };\n\n  // Klavye kontrolleri: bilgisayar için dönme ve hareket mantığı\n  useEffect(() => {\n    if (deviceType !== 'computer') return;\n    const keyMap = {\n      'w': {\n        playerId: 1,\n        action: 'move'\n      },\n      'e': {\n        playerId: 1,\n        action: 'fire'\n      },\n      't': {\n        playerId: 2,\n        action: 'move'\n      },\n      'y': {\n        playerId: 2,\n        action: 'fire'\n      },\n      'i': {\n        playerId: 3,\n        action: 'move'\n      },\n      'o': {\n        playerId: 3,\n        action: 'fire'\n      },\n      'up': {\n        playerId: 4,\n        action: 'move'\n      },\n      'shift': {\n        playerId: 4,\n        action: 'fire'\n      }\n    };\n    const handleKeyDown = e => {\n      const key = e.key.toLowerCase();\n      const mapped = keyMap[key];\n      if (mapped) {\n        if (mapped.action === 'move') {\n          setRotating(r => ({\n            ...r,\n            [mapped.playerId]: false\n          }));\n          setMoving(m => ({\n            ...m,\n            [mapped.playerId]: true\n          }));\n        } else if (mapped.action === 'fire') {\n          handleCornerButtonClick(mapped.playerId);\n        }\n      }\n    };\n    const handleKeyUp = e => {\n      const key = e.key.toLowerCase();\n      const mapped = keyMap[key];\n      if (mapped && mapped.action === 'move') {\n        setRotating(r => ({\n          ...r,\n          [mapped.playerId]: true\n        }));\n        setMoving(m => ({\n          ...m,\n          [mapped.playerId]: false\n        }));\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [deviceType]);\n\n  // Buton simgesi tank olsun, yoksa simgesiz bırak\n  const TankButtonIcon = () => /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"36\",\n    height: \"24\",\n    viewBox: \"0 0 36 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n      x: \"4\",\n      y: \"8\",\n      width: \"20\",\n      height: \"8\",\n      rx: \"3\",\n      fill: \"#333\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 760,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n      x: \"24\",\n      y: \"11\",\n      width: \"8\",\n      height: \"2\",\n      rx: \"1\",\n      fill: \"#333\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 761,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n      cx: \"10\",\n      cy: \"20\",\n      r: \"3\",\n      fill: \"#333\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 762,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n      cx: \"20\",\n      cy: \"20\",\n      r: \"3\",\n      fill: \"#333\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 759,\n    columnNumber: 5\n  }, this);\n\n  // Oyun yeniden başlatma fonksiyonu\n  const handleRestart = () => {\n    setWinner(null);\n    setCountdown(3);\n    setGameStarted(false);\n    initializeGame();\n    setBullets([]);\n  };\n  return /*#__PURE__*/_jsxDEV(GameArea, {\n    children: [countdown !== null && /*#__PURE__*/_jsxDEV(CountdownOverlay, {\n      children: /*#__PURE__*/_jsxDEV(CountdownText, {\n        children: countdown === 0 ? 'Başla!' : countdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 779,\n      columnNumber: 9\n    }, this), winner !== null && /*#__PURE__*/_jsxDEV(WinOverlay, {\n      children: [/*#__PURE__*/_jsxDEV(WinText, {\n        children: [\"Kazanan: Oyuncu \", winner]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 787,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ScoreTable, {\n        children: players.map(p => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: playerColors[p.id]\n          },\n          children: [\"Oyuncu \", p.id, \": \", p.score, \" puan\"]\n        }, p.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 790,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 788,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          marginTop: 32,\n          fontSize: 24,\n          padding: '12px 32px',\n          borderRadius: 8,\n          border: 'none',\n          background: '#fff',\n          color: '#222',\n          fontWeight: 'bold',\n          cursor: 'pointer'\n        },\n        onClick: handleRestart,\n        children: \"Tekrar Oyna\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 795,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 786,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(GameGrid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 800,\n      columnNumber: 7\n    }, this), walls.map((w, i) => /*#__PURE__*/_jsxDEV(Wall, {\n      style: {\n        left: w.x,\n        top: w.y,\n        width: w.w,\n        height: w.h\n      }\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 803,\n      columnNumber: 9\n    }, this)), players.map(player => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(HealthBar, {\n        health: player.health,\n        color: playerColors[player.id],\n        style: {\n          left: player.position.x + 10,\n          top: player.position.y - 10\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 807,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Tank, {\n        color: playerColors[player.id],\n        rotation: player.rotation,\n        position: player.position,\n        isMoving: player.isMoving,\n        size: tankSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 815,\n        columnNumber: 11\n      }, this)]\n    }, player.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 806,\n      columnNumber: 9\n    }, this)), smoke.map(s => /*#__PURE__*/_jsxDEV(Smoke, {\n      size: s.size,\n      opacity: s.opacity,\n      style: {\n        left: s.x,\n        top: s.y\n      }\n    }, s.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 826,\n      columnNumber: 9\n    }, this)), bullets.map(bullet => /*#__PURE__*/_jsxDEV(Bullet, {\n      size: BULLET_SIZE,\n      style: {\n        left: bullet.position.x,\n        top: bullet.position.y\n      }\n    }, bullet.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 830,\n      columnNumber: 9\n    }, this)), deviceType === 'phone' && players.map((player, idx) => /*#__PURE__*/_jsxDEV(CornerButton, {\n      color: playerColors[player.id],\n      position: cornerPositions[idx],\n      onClick: () => handleCornerButtonClick(player.id),\n      onTouchStart: () => handleCornerButtonDown(player.id),\n      onTouchEnd: () => handleCornerButtonUp(player.id),\n      onMouseDown: () => handleCornerButtonDown(player.id),\n      onMouseUp: () => handleCornerButtonUp(player.id),\n      onMouseLeave: () => handleCornerButtonUp(player.id),\n      children: /*#__PURE__*/_jsxDEV(TankButtonIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 851,\n        columnNumber: 11\n      }, this)\n    }, player.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 840,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 777,\n    columnNumber: 5\n  }, this);\n};\n_s(TankGame, \"9rgKOCZbj8Qj+9CPGBHpcRdcmrw=\");\n_c11 = TankGame;\nexport default TankGame;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1, _c10, _c11;\n$RefreshReg$(_c, \"GameArea\");\n$RefreshReg$(_c2, \"GameGrid\");\n$RefreshReg$(_c3, \"Bullet\");\n$RefreshReg$(_c4, \"Smoke\");\n$RefreshReg$(_c5, \"HealthBar\");\n$RefreshReg$(_c6, \"CornerButton\");\n$RefreshReg$(_c7, \"Wall\");\n$RefreshReg$(_c8, \"CountdownOverlay\");\n$RefreshReg$(_c9, \"CountdownText\");\n$RefreshReg$(_c0, \"WinOverlay\");\n$RefreshReg$(_c1, \"WinText\");\n$RefreshReg$(_c10, \"ScoreTable\");\n$RefreshReg$(_c11, \"TankGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","styled","Tank","jsxDEV","_jsxDEV","GameArea","div","_c","GameGrid","_c2","Grass","Bullet","props","size","_c3","Smoke","opacity","_c4","HealthBar","health","color","_c5","Controls","ControlButton","button","FireButton","CornerButton","position","_c6","playerColors","cornerPositions","TANK_SIZE","CANNON_LENGTH","GRID_SIZE","GRID_COLS","Math","floor","window","innerWidth","GRID_ROWS","innerHeight","Wall","_c7","GrassPatch","CountdownOverlay","_c8","CountdownText","_c9","WinOverlay","_c0","WinText","_c1","ScoreTable","_c10","BULLET_SIZE","SMOKE_SIZE","generateMaze","cols","rows","walls","y","x","random","push","w","h","TankGame","playerCount","deviceType","_s","players","setPlayers","bullets","setBullets","bulletsRef","rotating","setRotating","moving","setMoving","activePlayer","setActivePlayer","setWalls","tankSize","setTankSize","countdown","setCountdown","gameStarted","setGameStarted","winner","setWinner","smoke","setSmoke","bulletsToRemove","setBulletsToRemove","getRandomPosition","margin","initializeGame","maze","length","initialPlayers","Array","from","_","i","id","rotation","isMoving","alive","score","movePlayer","playerId","direction","prevPlayers","map","player","speed","newX","newY","newRotation","playerRect","hasCollision","some","wall","max","min","fireBullet","find","p","bulletSpeed","bulletSize","bulletX","bulletY","bulletVX","bulletVY","bullet","Date","now","bounces","prev","timer","setTimeout","c","clearTimeout","current","bulletInterval","setInterval","prevBullets","currentBullets","rad","PI","cos","sin","filter","b","includes","clearInterval","interval","prevSmoke","newSmoke","forEach","s","initialRotating","initialMoving","nextX","nextY","tankRect","collides","updatedPlayers","removeBullets","bulletRect","hit","alivePlayers","handleCornerButtonClick","centerX","centerY","offsetX","offsetY","handleCornerButtonDown","r","m","handleCornerButtonUp","keyMap","action","handleKeyDown","e","key","toLowerCase","mapped","handleKeyUp","addEventListener","removeEventListener","TankButtonIcon","width","height","viewBox","fill","xmlns","children","rx","fileName","_jsxFileName","lineNumber","columnNumber","cx","cy","handleRestart","style","marginTop","fontSize","padding","borderRadius","border","background","fontWeight","cursor","onClick","left","top","Fragment","idx","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","onMouseLeave","_c11","$RefreshReg$"],"sources":["/home/cesur/Documents/Projects/iki-kisilik-web/src/components/games/TankGame/TankGame.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport Tank from './Tank';\n\nconst GameArea = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: #d2b48c; // Çöl rengi\n  position: relative;\n  overflow: hidden;\n`;\n\nconst GameGrid = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-image: \n    linear-gradient(rgba(0, 0, 0, 0.1) 1px, transparent 1px),\n    linear-gradient(90deg, rgba(0, 0, 0, 0.1) 1px, transparent 1px);\n  background-size: 40px 40px;\n  pointer-events: none;\n`;\n\nconst Grass = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-image: url(\"data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M50 0 L100 50 L50 100 L0 50 Z' fill='%232ecc71' fill-opacity='0.1'/%3E%3C/svg%3E\");\n  background-size: 20px 20px;\n  pointer-events: none;\n`;\n\nconst Bullet = styled.div<{ size: number }>`\n  position: absolute;\n  width: ${props => props.size}px;\n  height: ${props => props.size}px;\n  background: #222;\n  border-radius: 50%;\n  box-shadow: 0 0 6px #000a;\n`;\n\nconst Smoke = styled.div<{ size: number; opacity: number }>`\n  position: absolute;\n  width: ${props => props.size}px;\n  height: ${props => props.size}px;\n  background: #888;\n  border-radius: 50%;\n  opacity: ${props => props.opacity};\n  pointer-events: none;\n`;\n\nconst HealthBar = styled.div<{ health: number; color: string }>`\n  position: absolute;\n  width: 40px;\n  height: 4px;\n  background: rgba(0, 0, 0, 0.3);\n  border-radius: 2px;\n  overflow: hidden;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: ${props => props.health}%;\n    height: 100%;\n    background: ${props => props.color};\n    transition: width 0.3s ease;\n  }\n`;\n\nconst Controls = styled.div`\n  position: absolute;\n  bottom: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  display: flex;\n  gap: 20px;\n  z-index: 1;\n`;\n\nconst ControlButton = styled.button<{ color: string }>`\n  background: ${props => props.color};\n  border: none;\n  width: 50px;\n  height: 50px;\n  border-radius: 25px;\n  color: white;\n  font-size: 24px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  transition: all 0.2s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);\n  }\n\n  &:active {\n    transform: translateY(1px);\n  }\n`;\n\nconst FireButton = styled(ControlButton)`\n  background: #e74c3c;\n  width: 60px;\n  height: 60px;\n  font-size: 20px;\n`;\n\nconst CornerButton = styled.button<{ color: string; position: string }>`\n  position: absolute;\n  width: 90px;\n  height: 90px;\n  border-radius: 50%;\n  background: ${props => props.color};\n  color: #fff;\n  font-size: 2.5rem;\n  border: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 16px rgba(0,0,0,0.15);\n  z-index: 10;\n  cursor: pointer;\n  opacity: 0.95;\n  ${props => props.position === 'bottomLeft' && 'left: 30px; bottom: 30px;'}\n  ${props => props.position === 'bottomRight' && 'right: 30px; bottom: 30px;'}\n  ${props => props.position === 'topLeft' && 'left: 30px; top: 30px;'}\n  ${props => props.position === 'topRight' && 'right: 30px; top: 30px;'}\n`;\n\nconst playerColors: Record<1 | 2 | 3 | 4, string> = {\n  1: '#e74c3c', // Kırmızı\n  2: '#3498db', // Mavi\n  3: '#2ecc71', // Yeşil\n  4: '#f1c40f'  // Sarı\n};\n\ninterface Player {\n  id: number;\n  position: { x: number; y: number };\n  rotation: number;\n  health: number;\n  isMoving: boolean;\n  alive: boolean;\n  score: number;\n}\n\ninterface Bullet {\n  id: number;\n  playerId: number;\n  position: { x: number; y: number };\n  rotation: number;\n  bounces: number;\n}\n\ninterface SmokeParticle {\n  id: number;\n  x: number;\n  y: number;\n  opacity: number;\n  size: number;\n}\n\nconst cornerPositions = [\n  'bottomLeft', // 1. oyuncu\n  'bottomRight', // 2. oyuncu\n  'topLeft', // 3. oyuncu\n  'topRight' // 4. oyuncu\n] as const;\n\ntype CornerPosition = typeof cornerPositions[number];\n\nconst TANK_SIZE = 60;\nconst CANNON_LENGTH = 30;\nconst GRID_SIZE = 80; // Kare boyutu\nconst GRID_COLS = Math.floor(window.innerWidth / GRID_SIZE);\nconst GRID_ROWS = Math.floor(window.innerHeight / GRID_SIZE);\n\nconst Wall = styled.div`\n  position: absolute;\n  background: #e0e0e0;\n  border: 3px solid #bdbdbd;\n  box-sizing: border-box;\n  border-radius: 4px;\n`;\n\nconst GrassPatch = styled.div`\n  position: absolute;\n  width: 40px;\n  height: 40px;\n  background: radial-gradient(circle at 60% 40%, #4caf50 70%, #388e3c 100%);\n  border-radius: 50%;\n  opacity: 0.7;\n`;\n\nconst CountdownOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(0,0,0,0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n`;\n\nconst CountdownText = styled.div`\n  color: #fff;\n  font-size: 8rem;\n  font-weight: bold;\n  text-shadow: 0 0 40px #000, 0 0 10px #fff;\n  animation: pop 0.5s;\n  @keyframes pop {\n    0% { transform: scale(0.7); opacity: 0.5; }\n    60% { transform: scale(1.2); opacity: 1; }\n    100% { transform: scale(1); opacity: 1; }\n  }\n`;\n\nconst WinOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(0,0,0,0.7);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  z-index: 2000;\n`;\n\nconst WinText = styled.div`\n  color: #fff;\n  font-size: 4rem;\n  font-weight: bold;\n  margin-bottom: 2rem;\n  text-shadow: 0 0 30px #000, 0 0 10px #fff;\n`;\n\nconst ScoreTable = styled.div`\n  background: rgba(255,255,255,0.1);\n  border-radius: 12px;\n  padding: 2rem 3rem;\n  color: #fff;\n  font-size: 1.5rem;\n  box-shadow: 0 0 20px #0008;\n`;\n\nconst BULLET_SIZE = 8;\nconst SMOKE_SIZE = 18;\n\n// Labirent için grid tabanlı duvarlar\nfunction generateMaze(cols: number, rows: number) {\n  // Basit bir maze algoritması (örnek: her satırda ve sütunda rastgele kısa kenarlı duvarlar)\n  const walls: { x: number; y: number; w: number; h: number }[] = [];\n  for (let y = 0; y < rows; y++) {\n    for (let x = 0; x < cols; x++) {\n      // Yatay duvar\n      if (Math.random() > 0.6 && x < cols - 1) {\n        walls.push({\n          x: x * GRID_SIZE,\n          y: y * GRID_SIZE,\n          w: GRID_SIZE,\n          h: 8\n        });\n      }\n      // Dikey duvar\n      if (Math.random() > 0.6 && y < rows - 1) {\n        walls.push({\n          x: x * GRID_SIZE,\n          y: y * GRID_SIZE,\n          w: 8,\n          h: GRID_SIZE\n        });\n      }\n    }\n  }\n  // Kenar duvarları\n  walls.push({ x: 0, y: 0, w: cols * GRID_SIZE, h: 8 }); // üst\n  walls.push({ x: 0, y: rows * GRID_SIZE - 8, w: cols * GRID_SIZE, h: 8 }); // alt\n  walls.push({ x: 0, y: 0, w: 8, h: rows * GRID_SIZE }); // sol\n  walls.push({ x: cols * GRID_SIZE - 8, y: 0, w: 8, h: rows * GRID_SIZE }); // sağ\n  return walls;\n}\n\nconst TankGame: React.FC<{ \n  playerCount: number;\n  deviceType: 'computer' | 'phone';\n}> = ({ playerCount, deviceType }) => {\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [bullets, setBullets] = useState<Bullet[]>([]);\n  const bulletsRef = useRef<Bullet[]>(bullets);\n  const [rotating, setRotating] = useState<{ [id: number]: boolean }>({});\n  const [moving, setMoving] = useState<{ [id: number]: boolean }>({});\n  const [activePlayer, setActivePlayer] = useState<1 | 2 | 3 | 4>(1);\n  const [walls, setWalls] = useState<{ x: number; y: number; w: number; h: number }[]>([]);\n  const [tankSize, setTankSize] = useState<number>(60);\n  const [countdown, setCountdown] = useState<number | null>(3);\n  const [gameStarted, setGameStarted] = useState<boolean>(false);\n  const [winner, setWinner] = useState<number | null>(null);\n  const [smoke, setSmoke] = useState<SmokeParticle[]>([]);\n  const [bulletsToRemove, setBulletsToRemove] = useState<number[]>([]);\n\n  // Rastgele pozisyon oluşturma fonksiyonu\n  const getRandomPosition = () => {\n    const margin = 100; // Kenarlardan uzaklık\n    return {\n      x: margin + Math.random() * (window.innerWidth - 2 * margin),\n      y: margin + Math.random() * (window.innerHeight - 2 * margin)\n    };\n  };\n\n  // Oyunu başlatma fonksiyonu\n  const initializeGame = useCallback(() => {\n    // Yeni labirent oluştur\n    const maze = generateMaze(GRID_COLS, GRID_ROWS);\n    setWalls(maze);\n    \n    // Tank boyutunu ayarla\n    let size = 60;\n    if (maze.length > 60) size = 36;\n    else if (maze.length > 40) size = 44;\n    else if (maze.length > 25) size = 52;\n    setTankSize(size);\n\n    // Oyuncuları rastgele pozisyonlara yerleştir\n    const initialPlayers: Player[] = Array.from({ length: playerCount }, (_, i) => ({\n      id: i + 1,\n      position: getRandomPosition(),\n      rotation: Math.random() * 360, // Rastgele başlangıç rotasyonu\n      health: 3,\n      isMoving: false,\n      alive: true,\n      score: 0\n    }));\n    setPlayers(initialPlayers);\n  }, [playerCount]);\n\n  // Oyun başladığında ve yeniden başlatıldığında initializeGame'i çağır\n  useEffect(() => {\n    initializeGame();\n  }, [initializeGame]);\n\n  const movePlayer = useCallback((playerId: number, direction: 'up' | 'down' | 'left' | 'right') => {\n    setPlayers(prevPlayers => {\n      return prevPlayers.map(player => {\n        if (player.id === playerId) {\n          const speed = 2; // Tank hızını yavaşlattık\n          let newX = player.position.x;\n          let newY = player.position.y;\n          let newRotation = player.rotation;\n\n          switch (direction) {\n            case 'up':\n              newY -= speed;\n              newRotation = 0;\n              break;\n            case 'down':\n              newY += speed;\n              newRotation = 180;\n              break;\n            case 'left':\n              newX -= speed;\n              newRotation = 270;\n              break;\n            case 'right':\n              newX += speed;\n              newRotation = 90;\n              break;\n          }\n\n          // Duvarlarla çarpışma kontrolü\n          const playerRect = {\n            x: newX - tankSize / 2,\n            y: newY - tankSize / 2,\n            w: tankSize,\n            h: tankSize\n          };\n\n          const hasCollision = walls.some(wall => {\n            return !(playerRect.x + playerRect.w < wall.x ||\n              playerRect.x > wall.x + wall.w ||\n              playerRect.y + playerRect.h < wall.y ||\n              playerRect.y > wall.y + wall.h);\n          });\n\n          if (hasCollision) {\n            return player;\n          }\n\n          // Ekran sınırları kontrolü\n          newX = Math.max(tankSize / 2, Math.min(window.innerWidth - tankSize / 2, newX));\n          newY = Math.max(tankSize / 2, Math.min(window.innerHeight - tankSize / 2, newY));\n\n          return {\n            ...player,\n            position: { x: newX, y: newY },\n            rotation: newRotation\n          };\n        }\n        return player;\n      });\n    });\n  }, [tankSize, walls]);\n\n  // Mermi atma fonksiyonu\n  const fireBullet = useCallback((playerId: number) => {\n    const player = players.find(p => p.id === playerId);\n    if (!player) return;\n\n    const bulletSpeed = 8;\n    const bulletSize = tankSize / 4;\n    let bulletX = player.position.x;\n    let bulletY = player.position.y;\n    let bulletVX = 0;\n    let bulletVY = 0;\n\n    // Mermi yönünü hesapla\n    switch (player.rotation) {\n      case 0: // Yukarı\n        bulletY -= tankSize / 2;\n        bulletVY = -bulletSpeed;\n        break;\n      case 180: // Aşağı\n        bulletY += tankSize / 2;\n        bulletVY = bulletSpeed;\n        break;\n      case 270: // Sol\n        bulletX -= tankSize / 2;\n        bulletVX = -bulletSpeed;\n        break;\n      case 90: // Sağ\n        bulletX += tankSize / 2;\n        bulletVX = bulletSpeed;\n        break;\n    }\n\n    const bullet: Bullet = {\n      id: Date.now(),\n      playerId,\n      position: { x: bulletX, y: bulletY },\n      rotation: player.rotation,\n      bounces: 0\n    };\n\n    setBullets(prev => [...prev, bullet]);\n  }, [players, tankSize]);\n\n  // Geri sayım başlat\n  useEffect(() => {\n    setCountdown(3);\n    setGameStarted(false);\n  }, [playerCount]);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (countdown !== null) {\n      if (countdown > 0) {\n        timer = setTimeout(() => setCountdown((c) => (c !== null ? c - 1 : null)), 1000);\n      } else if (countdown === 0) {\n        timer = setTimeout(() => {\n          setCountdown(null);\n          setGameStarted(true);\n        }, 800);\n      }\n    }\n    return () => clearTimeout(timer);\n  }, [countdown]);\n\n  useEffect(() => { bulletsRef.current = bullets; }, [bullets]);\n\n  // Mermiler 6 kez sekince kaybolsun ve çarpışanlar silinsin\n  useEffect(() => {\n    const bulletInterval = setInterval(() => {\n      setBullets(prevBullets => {\n        const currentBullets = bulletsRef.current;\n        return currentBullets\n          .map(bullet => {\n            let speed = 10;\n            let rad = bullet.rotation * Math.PI / 180;\n            let newX = bullet.position.x + Math.cos(rad) * speed;\n            let newY = bullet.position.y + Math.sin(rad) * speed;\n            let newRotation = bullet.rotation;\n            let bounces = bullet.bounces;\n            if (newX < 0 || newX > window.innerWidth - BULLET_SIZE) {\n              newRotation = 180 - newRotation;\n              bounces++;\n            }\n            if (newY < 0 || newY > window.innerHeight - BULLET_SIZE) {\n              newRotation = 360 - newRotation;\n              bounces++;\n            }\n            for (const wall of walls) {\n              if (\n                newX + BULLET_SIZE > wall.x && newX < wall.x + wall.w &&\n                newY + BULLET_SIZE > wall.y && newY < wall.y + wall.h\n              ) {\n                if (wall.w > wall.h) {\n                  newRotation = 360 - newRotation;\n                } else {\n                  newRotation = 180 - newRotation;\n                }\n                bounces++;\n                break;\n              }\n            }\n            if (bounces >= 6) return null;\n            return {\n              ...bullet,\n              rotation: newRotation,\n              bounces\n            };\n          })\n          .filter((b): b is Bullet => b !== null)\n          .filter(bullet => !bulletsToRemove.includes(bullet.id));\n      });\n      setBulletsToRemove([]);\n    }, 16);\n    return () => clearInterval(bulletInterval);\n  }, [walls, gameStarted, bulletsToRemove]);\n\n  // Tank hareket ediyorsa arkasında duman efekti bırak\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSmoke(prevSmoke => {\n        let newSmoke = [...prevSmoke];\n        players.forEach(player => {\n          if (player.isMoving && player.alive) {\n            const rad = player.rotation * Math.PI / 180;\n            // Duman tankın arkasında çıksın\n            const x = player.position.x + tankSize / 2 - Math.cos(rad) * (tankSize / 2 + 8) - SMOKE_SIZE / 2;\n            const y = player.position.y + tankSize / 2 - Math.sin(rad) * (tankSize / 2 + 8) - SMOKE_SIZE / 2;\n            newSmoke.push({\n              id: Date.now() + Math.random(),\n              x,\n              y,\n              opacity: 0.7,\n              size: SMOKE_SIZE\n            });\n          }\n        });\n        // Dumanları yavaşça sil\n        newSmoke = newSmoke.map(s => ({ ...s, opacity: s.opacity - 0.04 })).filter(s => s.opacity > 0);\n        return newSmoke;\n      });\n    }, 40);\n    return () => clearInterval(interval);\n  }, [players, tankSize]);\n\n  // Başlangıçta tanklar dönüyor, hareket etmiyor\n  useEffect(() => {\n    const initialRotating: { [id: number]: boolean } = {};\n    const initialMoving: { [id: number]: boolean } = {};\n    for (let i = 1; i <= playerCount; i++) {\n      initialRotating[i] = true;\n      initialMoving[i] = false;\n    }\n    setRotating(initialRotating);\n    setMoving(initialMoving);\n  }, [playerCount]);\n\n  // Tanklar sadece rotating true ise döner (daha hızlı dönsün)\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setPlayers(prevPlayers => prevPlayers.map(player => {\n        if (rotating[player.id]) {\n          return {\n            ...player,\n            rotation: player.rotation + 6 // Daha hızlı dönsün\n          };\n        }\n        return player;\n      }));\n    }, 30);\n    return () => clearInterval(interval);\n  }, [rotating]);\n\n  // Tanklar sadece moving true ise ileri gider\n  useEffect(() => {\n    if (!gameStarted) return;\n    const interval = setInterval(() => {\n      setPlayers(prevPlayers => prevPlayers.map(player => {\n        if (moving[player.id]) {\n          const speed = 6;\n          let newX = player.position.x;\n          let newY = player.position.y;\n          let rad = player.rotation * Math.PI / 180;\n          const nextX = newX + Math.cos(rad) * speed;\n          const nextY = newY + Math.sin(rad) * speed;\n          const tankRect = {\n            x: nextX,\n            y: nextY,\n            w: tankSize,\n            h: tankSize\n          };\n          const collides = walls.some(wall =>\n            tankRect.x < wall.x + wall.w &&\n            tankRect.x + tankRect.w > wall.x &&\n            tankRect.y < wall.y + wall.h &&\n            tankRect.y + tankRect.h > wall.y\n          );\n          if (!collides) {\n            newX = Math.max(0, Math.min(window.innerWidth - tankSize, nextX));\n            newY = Math.max(0, Math.min(window.innerHeight - tankSize, nextY));\n            return {\n              ...player,\n              position: { x: newX, y: newY },\n              isMoving: true\n            };\n          } else {\n            return { ...player, isMoving: false };\n          }\n        }\n        return { ...player, isMoving: false };\n      }));\n    }, 16);\n    return () => clearInterval(interval);\n  }, [moving, tankSize, walls, gameStarted]);\n\n  // Mermi-tank çarpışması: tek vuruşta patlama\n  useEffect(() => {\n    if (!gameStarted) return;\n    setPlayers(prevPlayers => {\n      let updatedPlayers = [...prevPlayers];\n      let removeBullets: number[] = [];\n      bullets.forEach(bullet => {\n        for (let i = 0; i < updatedPlayers.length; i++) {\n          const player = updatedPlayers[i];\n          if (!player.alive || bullet.playerId === player.id) continue;\n          const tankRect = {\n            x: player.position.x,\n            y: player.position.y,\n            w: tankSize,\n            h: tankSize\n          };\n          const bulletRect = {\n            x: bullet.position.x,\n            y: bullet.position.y,\n            w: BULLET_SIZE,\n            h: BULLET_SIZE\n          };\n          const hit =\n            tankRect.x < bulletRect.x + bulletRect.w &&\n            tankRect.x + tankRect.w > bulletRect.x &&\n            tankRect.y < bulletRect.y + bulletRect.h &&\n            tankRect.y + tankRect.h > bulletRect.y;\n          if (hit) {\n            updatedPlayers[i] = {\n              ...player,\n              alive: false\n            };\n            removeBullets.push(bullet.id);\n          }\n        }\n      });\n      setBulletsToRemove(removeBullets);\n      // Kazananı kontrol et\n      const alivePlayers = updatedPlayers.filter(p => p.alive);\n      if (alivePlayers.length === 1 && winner === null) {\n        setWinner(alivePlayers[0].id);\n        updatedPlayers = updatedPlayers.map(p =>\n          p.id === alivePlayers[0].id ? { ...p, score: p.score + 1 } : p\n        );\n      }\n      return updatedPlayers;\n    });\n  }, [bullets, gameStarted, tankSize, winner]);\n\n  // Butona tıklama: ateş et (mermi namlunun ucundan, doğru yöne çıkacak)\n  const handleCornerButtonClick = (playerId: number) => {\n    if (!gameStarted) return;\n    setPlayers(prevPlayers => {\n      const player = prevPlayers.find(p => p.id === playerId);\n      if (!player) return prevPlayers;\n      const rad = player.rotation * Math.PI / 180;\n      const centerX = player.position.x + tankSize / 2;\n      const centerY = player.position.y + tankSize / 2;\n      const offsetX = Math.cos(rad) * (tankSize / 2 + CANNON_LENGTH);\n      const offsetY = Math.sin(rad) * (tankSize / 2 + CANNON_LENGTH);\n      const bullet: Bullet = {\n        id: Date.now() + Math.random(),\n        playerId,\n        position: {\n          x: centerX + offsetX - 4,\n          y: centerY + offsetY - 4\n        },\n        rotation: player.rotation,\n        bounces: 0\n      };\n      setBullets(prev => [...prev, bullet]);\n      return prevPlayers;\n    });\n  };\n\n  // Butona basılı tutma: hareket başlar, dönme durur\n  const handleCornerButtonDown = (playerId: number) => {\n    setRotating(r => ({ ...r, [playerId]: false }));\n    setMoving(m => ({ ...m, [playerId]: true }));\n  };\n\n  // Butondan el çekilince: hareket durur, dönme başlar\n  const handleCornerButtonUp = (playerId: number) => {\n    setRotating(r => ({ ...r, [playerId]: true }));\n    setMoving(m => ({ ...m, [playerId]: false }));\n  };\n\n  // Klavye kontrolleri: bilgisayar için dönme ve hareket mantığı\n  useEffect(() => {\n    if (deviceType !== 'computer') return;\n    const keyMap: { [key: string]: { playerId: number; action: 'move' | 'fire' } } = {\n      'w': { playerId: 1, action: 'move' },\n      'e': { playerId: 1, action: 'fire' },\n      't': { playerId: 2, action: 'move' },\n      'y': { playerId: 2, action: 'fire' },\n      'i': { playerId: 3, action: 'move' },\n      'o': { playerId: 3, action: 'fire' },\n      'up': { playerId: 4, action: 'move' },\n      'shift': { playerId: 4, action: 'fire' }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const key = e.key.toLowerCase();\n      const mapped = keyMap[key];\n      if (mapped) {\n        if (mapped.action === 'move') {\n          setRotating(r => ({ ...r, [mapped.playerId]: false }));\n          setMoving(m => ({ ...m, [mapped.playerId]: true }));\n        } else if (mapped.action === 'fire') {\n          handleCornerButtonClick(mapped.playerId);\n        }\n      }\n    };\n    const handleKeyUp = (e: KeyboardEvent) => {\n      const key = e.key.toLowerCase();\n      const mapped = keyMap[key];\n      if (mapped && mapped.action === 'move') {\n        setRotating(r => ({ ...r, [mapped.playerId]: true }));\n        setMoving(m => ({ ...m, [mapped.playerId]: false }));\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [deviceType]);\n\n  // Buton simgesi tank olsun, yoksa simgesiz bırak\n  const TankButtonIcon = () => (\n    <svg width=\"36\" height=\"24\" viewBox=\"0 0 36 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect x=\"4\" y=\"8\" width=\"20\" height=\"8\" rx=\"3\" fill=\"#333\" />\n      <rect x=\"24\" y=\"11\" width=\"8\" height=\"2\" rx=\"1\" fill=\"#333\" />\n      <circle cx=\"10\" cy=\"20\" r=\"3\" fill=\"#333\" />\n      <circle cx=\"20\" cy=\"20\" r=\"3\" fill=\"#333\" />\n    </svg>\n  );\n\n  // Oyun yeniden başlatma fonksiyonu\n  const handleRestart = () => {\n    setWinner(null);\n    setCountdown(3);\n    setGameStarted(false);\n    initializeGame();\n    setBullets([]);\n  };\n\n  return (\n    <GameArea>\n      {countdown !== null && (\n        <CountdownOverlay>\n          <CountdownText>\n            {countdown === 0 ? 'Başla!' : countdown}\n          </CountdownText>\n        </CountdownOverlay>\n      )}\n      {winner !== null && (\n        <WinOverlay>\n          <WinText>Kazanan: Oyuncu {winner}</WinText>\n          <ScoreTable>\n            {players.map(p => (\n              <div key={p.id} style={{ color: playerColors[p.id as 1 | 2 | 3 | 4] }}>\n                Oyuncu {p.id}: {p.score} puan\n              </div>\n            ))}\n          </ScoreTable>\n          <button style={{ marginTop: 32, fontSize: 24, padding: '12px 32px', borderRadius: 8, border: 'none', background: '#fff', color: '#222', fontWeight: 'bold', cursor: 'pointer' }} onClick={handleRestart}>\n            Tekrar Oyna\n          </button>\n        </WinOverlay>\n      )}\n      <GameGrid />\n      {/* Duvarlar */}\n      {walls.map((w, i) => (\n        <Wall key={i} style={{ left: w.x, top: w.y, width: w.w, height: w.h }} />\n      ))}\n      {players.map(player => (\n        <React.Fragment key={player.id}>\n          <HealthBar \n            health={player.health}\n            color={playerColors[player.id as 1 | 2 | 3 | 4]}\n            style={{\n              left: player.position.x + 10,\n              top: player.position.y - 10\n            }}\n          />\n          <Tank\n            color={playerColors[player.id as 1 | 2 | 3 | 4]}\n            rotation={player.rotation}\n            position={player.position}\n            isMoving={player.isMoving}\n            size={tankSize}\n          />\n        </React.Fragment>\n      ))}\n      {/* Duman Efekti */}\n      {smoke.map(s => (\n        <Smoke key={s.id} size={s.size} opacity={s.opacity} style={{ left: s.x, top: s.y }} />\n      ))}\n      {/* Mermiler */}\n      {bullets.map(bullet => (\n        <Bullet\n          key={bullet.id}\n          size={BULLET_SIZE}\n          style={{\n            left: bullet.position.x,\n            top: bullet.position.y\n          }}\n        />\n      ))}\n      {deviceType === 'phone' && players.map((player, idx) => (\n        <CornerButton\n          key={player.id}\n          color={playerColors[player.id as 1 | 2 | 3 | 4]}\n          position={cornerPositions[idx]}\n          onClick={() => handleCornerButtonClick(player.id)}\n          onTouchStart={() => handleCornerButtonDown(player.id)}\n          onTouchEnd={() => handleCornerButtonUp(player.id)}\n          onMouseDown={() => handleCornerButtonDown(player.id)}\n          onMouseUp={() => handleCornerButtonUp(player.id)}\n          onMouseLeave={() => handleCornerButtonUp(player.id)}\n        >\n          <TankButtonIcon />\n        </CornerButton>\n      ))}\n    </GameArea>\n  );\n};\n\nexport default TankGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}