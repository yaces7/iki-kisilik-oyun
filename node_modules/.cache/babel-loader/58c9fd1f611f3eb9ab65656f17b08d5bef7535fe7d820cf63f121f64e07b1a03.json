{"ast":null,"code":"var _jsxFileName = \"/home/cesur/Documents/Projects/iki-kisilik-web/src/components/games/BomberArena/BomberArena.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_SIZE = 10;\nconst CELL_SIZE = 60;\nconst PLAYER_COLORS = ['#e74c3c', '#3498db', '#2ecc71', '#f1c40f'];\nconst Arena = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${GRID_SIZE}, ${CELL_SIZE}px);\n  grid-template-rows: repeat(${GRID_SIZE}, ${CELL_SIZE}px);\n  gap: 2px;\n  background: #d2b48c;\n  border: 4px solid #888;\n  margin: 40px auto;\n  width: ${GRID_SIZE * CELL_SIZE}px;\n  height: ${GRID_SIZE * CELL_SIZE}px;\n`;\n_c = Arena;\nconst Cell = styled.div`\n  width: ${CELL_SIZE}px;\n  height: ${CELL_SIZE}px;\n  background: ${props => props.isActive ? '#fffbe6' : '#f5e1a4'};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.5rem;\n  border-radius: 8px;\n  transition: background 0.2s, box-shadow 0.2s;\n  box-shadow: ${props => props.clickable ? '0 0 0 4px #2ecc71aa' : 'none'};\n  cursor: ${props => props.clickable ? 'pointer' : 'default'};\n`;\n_c2 = Cell;\nconst PlayerIcon = styled.div`\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  background: ${props => props.color};\n  border: 3px solid #fff;\n  box-shadow: 0 2px 8px #0002;\n  opacity: ${props => props.faded ? 0.3 : 1};\n  transition: opacity 0.5s;\n`;\n_c3 = PlayerIcon;\nconst BombIcon = styled.div`\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  background: #333;\n  position: relative;\n  box-shadow: 0 0 8px #0008;\n  &::after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: 50%;\n    width: 6px;\n    height: 6px;\n    background: orange;\n    border-radius: 50%;\n    transform: translateX(-50%);\n  }\n`;\n_c4 = BombIcon;\nconst ScoreBoard = styled.div`\n  margin: 24px auto;\n  display: flex;\n  justify-content: center;\n  gap: 32px;\n  font-size: 1.3rem;\n`;\nconst NextButton = styled.button`\n  margin: 32px auto 0 auto;\n  display: block;\n  font-size: 1.2rem;\n  padding: 12px 32px;\n  border-radius: 8px;\n  border: none;\n  background: #333;\n  color: #fff;\n  font-weight: bold;\n  cursor: pointer;\n  box-shadow: 0 2px 8px #0002;\n`;\nconst AnimatedScoreBoard = styled(ScoreBoard)`\n  animation: pop 0.7s cubic-bezier(.4,2,.6,1);\n  @keyframes pop {\n    0% { transform: scale(0.7); opacity: 0.5; }\n    60% { transform: scale(1.2); opacity: 1; }\n    100% { transform: scale(1); opacity: 1; }\n  }\n`;\n_c5 = AnimatedScoreBoard;\nconst NextGameButton = styled(NextButton)`\n  background: linear-gradient(45deg, #2ecc71, #27ae60);\n  font-size: 1.3rem;\n`;\n_c6 = NextGameButton;\nconst TurnInfo = styled.div`\n  text-align: center;\n  font-size: 2rem;\n  font-weight: bold;\n  color: #fff;\n  margin: 16px 0 24px 0;\n  background: linear-gradient(90deg, #ff6b6b 0%, #f1c40f 100%);\n  border-radius: 12px;\n  padding: 12px 0;\n  box-shadow: 0 2px 12px #0003;\n`;\n_c7 = TurnInfo;\nconst BomberArena = ({\n  playerCount\n}) => {\n  _s();\n  const [players, setPlayers] = useState(Array.from({\n    length: playerCount\n  }, (_, i) => ({\n    id: i,\n    x: Math.floor(Math.random() * GRID_SIZE),\n    y: Math.floor(Math.random() * GRID_SIZE),\n    alive: true,\n    score: 0\n  })));\n  const [bombs, setBombs] = useState([]);\n  const [activePlayer, setActivePlayer] = useState(0);\n  const [phase, setPhase] = useState('play');\n  const [explodedCells, setExplodedCells] = useState([]);\n  const [explosions, setExplosions] = useState([]);\n\n  // Bomba bÄ±rakma\n  const handleCellClick = (x, y) => {\n    if (phase !== 'play') return;\n    if (!players[activePlayer].alive) return;\n    // AynÄ± hÃ¼creye tekrar bomba bÄ±rakma\n    if (bombs.some(b => b.x === x && b.y === y)) return;\n    setBombs([...bombs, {\n      x,\n      y,\n      owner: players[activePlayer].id,\n      exploded: false\n    }]);\n    setPhase('explode');\n    setTimeout(() => {\n      explodeBomb(x, y);\n    }, 500);\n  };\n\n  // Patlama ve puanlama\n  const explodeBomb = (x, y) => {\n    // Patlayan hÃ¼creler (merkez + 4 yÃ¶n)\n    const cells = [{\n      x,\n      y\n    }, {\n      x: x - 1,\n      y\n    }, {\n      x: x + 1,\n      y\n    }, {\n      x,\n      y: y - 1\n    }, {\n      x,\n      y: y + 1\n    }].filter(c => c.x >= 0 && c.x < GRID_SIZE && c.y >= 0 && c.y < GRID_SIZE);\n    setExplodedCells(cells);\n    setBombs(bs => bs.map(b => b.x === x && b.y === y ? {\n      ...b,\n      exploded: true\n    } : b));\n    // Patlama animasyonu ekle\n    setExplosions(explosions => [...explosions, ...cells.map((c, i) => ({\n      x: c.x,\n      y: c.y,\n      id: Date.now() + i\n    }))]);\n    setTimeout(() => {\n      setExplosions(explosions => []);\n    }, 600);\n    // Oyuncu vuruldu mu?\n    setPlayers(ps => ps.map(p => {\n      if (!p.alive) return p;\n      if (cells.some(c => c.x === p.x && c.y === p.y)) {\n        return {\n          ...p,\n          alive: false\n        };\n      }\n      return p;\n    }));\n    // Puan ver\n    setPlayers(ps => ps.map((p, idx) => {\n      if (idx === activePlayer) {\n        // Her vurulan iÃ§in +2, hayatta kalÄ±rsa +1\n        const killed = players.filter(pl => pl.alive && cells.some(c => c.x === pl.x && c.y === pl.y) && pl.id !== p.id).length;\n        return {\n          ...p,\n          score: p.score + killed * 2 + (killed === 0 ? 1 : 0)\n        };\n      }\n      return p;\n    }));\n    setTimeout(() => {\n      setExplodedCells([]);\n      nextTurn();\n    }, 800);\n  };\n\n  // SÄ±radaki oyuncuya geÃ§\n  const nextTurn = () => {\n    if (players.filter(p => p.alive).length <= 1 || bombs.length >= GRID_SIZE * GRID_SIZE) {\n      setPhase('end');\n      return;\n    }\n    setActivePlayer(prev => (prev + 1) % playerCount);\n    setPhase('play');\n  };\n\n  // Skor tablosu\n  const renderScore = () => /*#__PURE__*/_jsxDEV(AnimatedScoreBoard, {\n    children: players.map((p, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: PLAYER_COLORS[i],\n        fontWeight: 700,\n        fontSize: 24,\n        marginRight: 16\n      },\n      children: [\"Oyuncu \", i + 1, \": \", p.score, \" puan \", p.alive ? '' : 'ðŸ’€']\n    }, p.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n\n  // Kazanan\n  const winner = players.find(p => p.alive);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: 'center',\n        marginTop: 24\n      },\n      children: \"Bomber Arena\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TurnInfo, {\n      children: phase === 'play' && players[activePlayer].alive ? `SÄ±ra: Oyuncu ${activePlayer + 1} - Bomba bÄ±rakmak iÃ§in bir hÃ¼creye tÄ±kla!` : phase === 'play' ? `SÄ±ra: Oyuncu ${activePlayer + 1} (Elendi)` : phase === 'end' && winner ? `Kazanan: Oyuncu ${winner.id + 1}` : phase === 'end' && !winner ? 'Kimse hayatta kalamadÄ±!' : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), renderScore(), /*#__PURE__*/_jsxDEV(Arena, {\n      children: [Array.from({\n        length: GRID_SIZE * GRID_SIZE\n      }).map((_, idx) => {\n        const x = idx % GRID_SIZE;\n        const y = Math.floor(idx / GRID_SIZE);\n        const playerHere = players.find((p, i) => p.x === x && p.y === y);\n        const bombHere = bombs.find(b => b.x === x && b.y === y);\n        const exploded = explodedCells.some(c => c.x === x && c.y === y);\n        // Sadece boÅŸ ve bomba olmayan hÃ¼creler tÄ±klanabilir\n        const clickable = phase === 'play' && players[activePlayer].alive && !bombHere && !playerHere;\n        return /*#__PURE__*/_jsxDEV(Cell, {\n          isActive: phase === 'play' && clickable,\n          clickable: clickable,\n          onClick: () => clickable && handleCellClick(x, y),\n          style: {\n            background: exploded ? '#ffb347' : undefined\n          },\n          children: [playerHere && /*#__PURE__*/_jsxDEV(PlayerIcon, {\n            color: PLAYER_COLORS[players.indexOf(playerHere)],\n            faded: !playerHere.alive\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 30\n          }, this), bombHere && /*#__PURE__*/_jsxDEV(BombIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 28\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this);\n      }), explosions.map(e => /*#__PURE__*/_jsxDEV(Explosion, {\n        x: e.x,\n        y: e.y\n      }, e.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 30\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), phase === 'end' && /*#__PURE__*/_jsxDEV(NextGameButton, {\n      onClick: () => window.location.reload(),\n      children: \"Sonraki Oyun\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n};\n_s(BomberArena, \"vh16bkOD6F5Cbb+Mj9vRrKrH9LA=\");\n_c8 = BomberArena;\nconst Explosion = ({\n  x,\n  y\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    position: 'absolute',\n    left: x * CELL_SIZE,\n    top: y * CELL_SIZE,\n    width: CELL_SIZE,\n    height: CELL_SIZE,\n    pointerEvents: 'none',\n    zIndex: 1000,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  children: /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: CELL_SIZE,\n    height: CELL_SIZE,\n    children: /*#__PURE__*/_jsxDEV(\"circle\", {\n      cx: CELL_SIZE / 2,\n      cy: CELL_SIZE / 2,\n      r: CELL_SIZE / 2 - 2,\n      fill: \"orange\",\n      fillOpacity: \"0.7\",\n      children: [/*#__PURE__*/_jsxDEV(\"animate\", {\n        attributeName: \"r\",\n        from: CELL_SIZE / 2 - 2,\n        to: CELL_SIZE,\n        dur: \"0.5s\",\n        fill: \"freeze\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"animate\", {\n        attributeName: \"opacity\",\n        from: \"0.7\",\n        to: \"0\",\n        dur: \"0.5s\",\n        fill: \"freeze\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 269,\n  columnNumber: 3\n}, this);\n_c9 = Explosion;\nexport default BomberArena;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"Arena\");\n$RefreshReg$(_c2, \"Cell\");\n$RefreshReg$(_c3, \"PlayerIcon\");\n$RefreshReg$(_c4, \"BombIcon\");\n$RefreshReg$(_c5, \"AnimatedScoreBoard\");\n$RefreshReg$(_c6, \"NextGameButton\");\n$RefreshReg$(_c7, \"TurnInfo\");\n$RefreshReg$(_c8, \"BomberArena\");\n$RefreshReg$(_c9, \"Explosion\");","map":{"version":3,"names":["React","useState","styled","jsxDEV","_jsxDEV","GRID_SIZE","CELL_SIZE","PLAYER_COLORS","Arena","div","_c","Cell","props","isActive","clickable","_c2","PlayerIcon","color","faded","_c3","BombIcon","_c4","ScoreBoard","NextButton","button","AnimatedScoreBoard","_c5","NextGameButton","_c6","TurnInfo","_c7","BomberArena","playerCount","_s","players","setPlayers","Array","from","length","_","i","id","x","Math","floor","random","y","alive","score","bombs","setBombs","activePlayer","setActivePlayer","phase","setPhase","explodedCells","setExplodedCells","explosions","setExplosions","handleCellClick","some","b","owner","exploded","setTimeout","explodeBomb","cells","filter","c","bs","map","Date","now","ps","p","idx","killed","pl","nextTurn","prev","renderScore","children","style","fontWeight","fontSize","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","winner","find","textAlign","marginTop","playerHere","bombHere","onClick","background","undefined","indexOf","e","Explosion","window","location","reload","_c8","position","left","top","width","height","pointerEvents","zIndex","display","alignItems","justifyContent","cx","cy","r","fill","fillOpacity","attributeName","to","dur","_c9","$RefreshReg$"],"sources":["/home/cesur/Documents/Projects/iki-kisilik-web/src/components/games/BomberArena/BomberArena.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst GRID_SIZE = 10;\nconst CELL_SIZE = 60;\nconst PLAYER_COLORS = ['#e74c3c', '#3498db', '#2ecc71', '#f1c40f'];\n\nconst Arena = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${GRID_SIZE}, ${CELL_SIZE}px);\n  grid-template-rows: repeat(${GRID_SIZE}, ${CELL_SIZE}px);\n  gap: 2px;\n  background: #d2b48c;\n  border: 4px solid #888;\n  margin: 40px auto;\n  width: ${GRID_SIZE * CELL_SIZE}px;\n  height: ${GRID_SIZE * CELL_SIZE}px;\n`;\n\nconst Cell = styled.div<{ isActive: boolean; clickable: boolean }>`\n  width: ${CELL_SIZE}px;\n  height: ${CELL_SIZE}px;\n  background: ${props => props.isActive ? '#fffbe6' : '#f5e1a4'};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.5rem;\n  border-radius: 8px;\n  transition: background 0.2s, box-shadow 0.2s;\n  box-shadow: ${props => props.clickable ? '0 0 0 4px #2ecc71aa' : 'none'};\n  cursor: ${props => props.clickable ? 'pointer' : 'default'};\n`;\n\nconst PlayerIcon = styled.div<{ color: string; faded?: boolean }>`\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  background: ${props => props.color};\n  border: 3px solid #fff;\n  box-shadow: 0 2px 8px #0002;\n  opacity: ${props => props.faded ? 0.3 : 1};\n  transition: opacity 0.5s;\n`;\n\nconst BombIcon = styled.div`\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  background: #333;\n  position: relative;\n  box-shadow: 0 0 8px #0008;\n  &::after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: 50%;\n    width: 6px;\n    height: 6px;\n    background: orange;\n    border-radius: 50%;\n    transform: translateX(-50%);\n  }\n`;\n\nconst ScoreBoard = styled.div`\n  margin: 24px auto;\n  display: flex;\n  justify-content: center;\n  gap: 32px;\n  font-size: 1.3rem;\n`;\n\nconst NextButton = styled.button`\n  margin: 32px auto 0 auto;\n  display: block;\n  font-size: 1.2rem;\n  padding: 12px 32px;\n  border-radius: 8px;\n  border: none;\n  background: #333;\n  color: #fff;\n  font-weight: bold;\n  cursor: pointer;\n  box-shadow: 0 2px 8px #0002;\n`;\n\nconst AnimatedScoreBoard = styled(ScoreBoard)`\n  animation: pop 0.7s cubic-bezier(.4,2,.6,1);\n  @keyframes pop {\n    0% { transform: scale(0.7); opacity: 0.5; }\n    60% { transform: scale(1.2); opacity: 1; }\n    100% { transform: scale(1); opacity: 1; }\n  }\n`;\n\nconst NextGameButton = styled(NextButton)`\n  background: linear-gradient(45deg, #2ecc71, #27ae60);\n  font-size: 1.3rem;\n`;\n\nconst TurnInfo = styled.div`\n  text-align: center;\n  font-size: 2rem;\n  font-weight: bold;\n  color: #fff;\n  margin: 16px 0 24px 0;\n  background: linear-gradient(90deg, #ff6b6b 0%, #f1c40f 100%);\n  border-radius: 12px;\n  padding: 12px 0;\n  box-shadow: 0 2px 12px #0003;\n`;\n\ninterface Player {\n  id: number;\n  x: number;\n  y: number;\n  alive: boolean;\n  score: number;\n}\n\ninterface Bomb {\n  x: number;\n  y: number;\n  owner: number;\n  exploded: boolean;\n}\n\nconst BomberArena: React.FC<{ playerCount: number }> = ({ playerCount }) => {\n  const [players, setPlayers] = useState<Player[]>(\n    Array.from({ length: playerCount }, (_, i) => ({\n      id: i,\n      x: Math.floor(Math.random() * GRID_SIZE),\n      y: Math.floor(Math.random() * GRID_SIZE),\n      alive: true,\n      score: 0\n    }))\n  );\n  const [bombs, setBombs] = useState<Bomb[]>([]);\n  const [activePlayer, setActivePlayer] = useState(0);\n  const [phase, setPhase] = useState<'play' | 'explode' | 'score' | 'end'>('play');\n  const [explodedCells, setExplodedCells] = useState<{x: number, y: number}[]>([]);\n  const [explosions, setExplosions] = useState<{x: number, y: number, id: number}[]>([]);\n\n  // Bomba bÄ±rakma\n  const handleCellClick = (x: number, y: number) => {\n    if (phase !== 'play') return;\n    if (!players[activePlayer].alive) return;\n    // AynÄ± hÃ¼creye tekrar bomba bÄ±rakma\n    if (bombs.some(b => b.x === x && b.y === y)) return;\n    setBombs([...bombs, { x, y, owner: players[activePlayer].id, exploded: false }]);\n    setPhase('explode');\n    setTimeout(() => {\n      explodeBomb(x, y);\n    }, 500);\n  };\n\n  // Patlama ve puanlama\n  const explodeBomb = (x: number, y: number) => {\n    // Patlayan hÃ¼creler (merkez + 4 yÃ¶n)\n    const cells = [\n      {x, y},\n      {x: x-1, y},\n      {x: x+1, y},\n      {x, y: y-1},\n      {x, y: y+1}\n    ].filter(c => c.x >= 0 && c.x < GRID_SIZE && c.y >= 0 && c.y < GRID_SIZE);\n    setExplodedCells(cells);\n    setBombs(bs => bs.map(b => (b.x === x && b.y === y ? { ...b, exploded: true } : b)));\n    // Patlama animasyonu ekle\n    setExplosions(explosions => [...explosions, ...cells.map((c, i) => ({x: c.x, y: c.y, id: Date.now() + i}))]);\n    setTimeout(() => {\n      setExplosions(explosions => []);\n    }, 600);\n    // Oyuncu vuruldu mu?\n    setPlayers(ps => ps.map(p => {\n      if (!p.alive) return p;\n      if (cells.some(c => c.x === p.x && c.y === p.y)) {\n        return { ...p, alive: false };\n      }\n      return p;\n    }));\n    // Puan ver\n    setPlayers(ps => ps.map((p, idx) => {\n      if (idx === activePlayer) {\n        // Her vurulan iÃ§in +2, hayatta kalÄ±rsa +1\n        const killed = players.filter(pl => pl.alive && cells.some(c => c.x === pl.x && c.y === pl.y) && pl.id !== p.id).length;\n        return { ...p, score: p.score + killed * 2 + (killed === 0 ? 1 : 0) };\n      }\n      return p;\n    }));\n    setTimeout(() => {\n      setExplodedCells([]);\n      nextTurn();\n    }, 800);\n  };\n\n  // SÄ±radaki oyuncuya geÃ§\n  const nextTurn = () => {\n    if (players.filter(p => p.alive).length <= 1 || bombs.length >= GRID_SIZE * GRID_SIZE) {\n      setPhase('end');\n      return;\n    }\n    setActivePlayer((prev) => (prev + 1) % playerCount);\n    setPhase('play');\n  };\n\n  // Skor tablosu\n  const renderScore = () => (\n    <AnimatedScoreBoard>\n      {players.map((p, i) => (\n        <span key={p.id} style={{ color: PLAYER_COLORS[i], fontWeight: 700, fontSize: 24, marginRight: 16 }}>\n          Oyuncu {i + 1}: {p.score} puan {p.alive ? '' : 'ðŸ’€'}\n        </span>\n      ))}\n    </AnimatedScoreBoard>\n  );\n\n  // Kazanan\n  const winner = players.find(p => p.alive);\n\n  return (\n    <div>\n      <h2 style={{ textAlign: 'center', marginTop: 24 }}>Bomber Arena</h2>\n      <TurnInfo>\n        {phase === 'play' && players[activePlayer].alive\n          ? `SÄ±ra: Oyuncu ${activePlayer + 1} - Bomba bÄ±rakmak iÃ§in bir hÃ¼creye tÄ±kla!`\n          : phase === 'play'\n            ? `SÄ±ra: Oyuncu ${activePlayer + 1} (Elendi)`\n            : phase === 'end' && winner\n              ? `Kazanan: Oyuncu ${winner.id + 1}`\n              : phase === 'end' && !winner\n                ? 'Kimse hayatta kalamadÄ±!'\n                : ''\n        }\n      </TurnInfo>\n      {renderScore()}\n      <Arena>\n        {Array.from({ length: GRID_SIZE * GRID_SIZE }).map((_, idx) => {\n          const x = idx % GRID_SIZE;\n          const y = Math.floor(idx / GRID_SIZE);\n          const playerHere = players.find((p, i) => p.x === x && p.y === y);\n          const bombHere = bombs.find(b => b.x === x && b.y === y);\n          const exploded = explodedCells.some(c => c.x === x && c.y === y);\n          // Sadece boÅŸ ve bomba olmayan hÃ¼creler tÄ±klanabilir\n          const clickable = phase === 'play' && players[activePlayer].alive && !bombHere && !playerHere;\n          return (\n            <Cell\n              key={idx}\n              isActive={phase === 'play' && clickable}\n              clickable={clickable}\n              onClick={() => clickable && handleCellClick(x, y)}\n              style={{ background: exploded ? '#ffb347' : undefined }}\n            >\n              {playerHere && <PlayerIcon color={PLAYER_COLORS[players.indexOf(playerHere)]} faded={!playerHere.alive} />}\n              {bombHere && <BombIcon />}\n            </Cell>\n          );\n        })}\n        {explosions.map(e => <Explosion key={e.id} x={e.x} y={e.y} />)}\n      </Arena>\n      {phase === 'end' && (\n        <NextGameButton onClick={() => window.location.reload()}>Sonraki Oyun</NextGameButton>\n      )}\n    </div>\n  );\n};\n\nconst Explosion = ({x, y}: {x: number, y: number}) => (\n  <div style={{\n    position: 'absolute',\n    left: x * CELL_SIZE,\n    top: y * CELL_SIZE,\n    width: CELL_SIZE,\n    height: CELL_SIZE,\n    pointerEvents: 'none',\n    zIndex: 1000,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  }}>\n    <svg width={CELL_SIZE} height={CELL_SIZE}>\n      <circle cx={CELL_SIZE/2} cy={CELL_SIZE/2} r={CELL_SIZE/2-2} fill=\"orange\" fillOpacity=\"0.7\">\n        <animate attributeName=\"r\" from={CELL_SIZE/2-2} to={CELL_SIZE} dur=\"0.5s\" fill=\"freeze\" />\n        <animate attributeName=\"opacity\" from=\"0.7\" to=\"0\" dur=\"0.5s\" fill=\"freeze\" />\n      </circle>\n    </svg>\n  </div>\n);\n\nexport default BomberArena; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}