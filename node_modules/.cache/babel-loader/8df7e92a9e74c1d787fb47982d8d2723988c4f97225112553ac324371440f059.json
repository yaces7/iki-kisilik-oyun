{"ast":null,"code":"var _jsxFileName = \"/home/cesur/Documents/Projects/iki-kisilik-web/src/components/games/MemoryMatch/MemoryMatch.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled, { keyframes } from 'styled-components';\n\n// Animasyonlar\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst fadeIn = keyframes`\n  from { opacity: 0; transform: translateY(-10px); }\n  to { opacity: 1; transform: translateY(0); }\n`;\nconst pulse = keyframes`\n  0% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n  100% { transform: scale(1); }\n`;\nconst flip = keyframes`\n  0% { transform: rotateY(0deg); }\n  100% { transform: rotateY(180deg); }\n`;\nconst flipBack = keyframes`\n  0% { transform: rotateY(180deg); }\n  100% { transform: rotateY(0deg); }\n`;\n\n// Stil componentleri\nconst GameContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  max-width: 900px;\n  width: 100%;\n  margin: 0 auto;\n  padding: 20px;\n`;\n_c = GameContainer;\nconst Header = styled.h2`\n  color: #fff;\n  font-size: 2.2rem;\n  text-align: center;\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n  text-shadow: 0 2px 10px rgba(0,0,0,0.2);\n`;\n_c2 = Header;\nconst ScoreBoard = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 24px;\n  margin: 1rem 0 2rem;\n  padding: 12px 20px;\n  border-radius: 12px;\n  background: rgba(255,255,255,0.1);\n  animation: ${fadeIn} 0.5s ease-out;\n`;\n_c3 = ScoreBoard;\nconst PlayerScore = styled.div`\n  color: ${props => props.color};\n  font-size: 1.2rem;\n  font-weight: bold;\n  padding: 8px 15px;\n  border-radius: 8px;\n  border: 2px solid ${props => props.color};\n  background: ${props => props.active ? `${props.color}22` : 'transparent'};\n  animation: ${props => props.active ? pulse : 'none'} 1s infinite;\n`;\n_c4 = PlayerScore;\nconst CardsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 15px;\n  max-width: 650px;\n  margin: 0 auto;\n\n  @media (max-width: 600px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`;\n_c5 = CardsGrid;\nconst CardContainer = styled.div`\n  width: 120px;\n  height: 120px;\n  position: relative;\n  perspective: 1000px;\n  cursor: ${props => props.flipped || props.matched ? 'default' : 'pointer'};\n  \n  @media (max-width: 600px) {\n    width: 100px;\n    height: 100px;\n  }\n`;\n_c6 = CardContainer;\nconst CardFace = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border-radius: 12px;\n  backface-visibility: hidden;\n  transition: all 0.4s ease-out;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2.5rem;\n  user-select: none;\n  box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n  \n  ${props => props.back && `\n    transform: rotateY(180deg);\n  `}\n  \n  ${props => props.flipped && `\n    transform: ${props.back ? 'rotateY(0deg)' : 'rotateY(-180deg)'};\n  `}\n  \n  ${props => props.matched && `\n    opacity: 0.8;\n    box-shadow: 0 0 15px rgba(46, 204, 113, 0.8);\n  `}\n`;\nconst CardBack = styled(CardFace)`\n  background: linear-gradient(135deg, #3498db, #9b59b6);\n`;\n_c7 = CardBack;\nconst CardFront = styled(CardFace)`\n  background: #fff;\n  color: #333;\n`;\n_c8 = CardFront;\nconst InfoText = styled.div`\n  font-size: 1.8rem;\n  font-weight: bold;\n  text-align: center;\n  margin: 1.5rem 0;\n  color: white;\n  background: linear-gradient(45deg, #3498db, #1abc9c);\n  padding: 15px 30px;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n`;\n_c9 = InfoText;\nconst NextButton = styled.button`\n  background: linear-gradient(45deg, #2ecc71, #27ae60);\n  color: white;\n  font-size: 1.3rem;\n  font-weight: bold;\n  padding: 12px 40px;\n  border: none;\n  border-radius: 8px;\n  margin-top: 2rem;\n  cursor: pointer;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n  \n  &:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 15px rgba(0,0,0,0.2);\n  }\n`;\n\n// Oyun sembolleri\n_c0 = NextButton;\nconst CARD_SYMBOLS = ['🍎', '🍌', '🍒', '🍓', '🍊', '🍉', '🍇', '🥝', '🍍', '🥥', '🍄', '🌶️'];\nconst PLAYER_COLORS = ['#e74c3c', '#3498db', '#2ecc71', '#f1c40f'];\nconst MemoryMatch = ({\n  playerCount\n}) => {\n  _s();\n  const [players, setPlayers] = useState(Array.from({\n    length: playerCount\n  }, (_, i) => ({\n    id: i,\n    score: 0\n  })));\n  const [activePlayer, setActivePlayer] = useState(0);\n  const [cards, setCards] = useState([]);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedPairs, setMatchedPairs] = useState(0);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [phase, setPhase] = useState('ready');\n\n  // Kartları karıştır ve oyunu hazırla\n  const initializeGame = () => {\n    // Oyuncu sayısına göre kart sayısını belirle (çift sayı olmalı)\n    const pairCount = playerCount === 2 ? 8 : playerCount === 3 ? 9 : 12;\n\n    // Sembolleri seç ve çiftler oluştur\n    const selectedSymbols = CARD_SYMBOLS.slice(0, pairCount);\n    const cardPairs = [...selectedSymbols, ...selectedSymbols];\n\n    // Kartları karıştır ve id ekle\n    const shuffledCards = cardPairs.sort(() => Math.random() - 0.5).map((symbol, index) => ({\n      id: index,\n      symbol,\n      flipped: false,\n      matched: false\n    }));\n    setCards(shuffledCards);\n    setMatchedPairs(0);\n    setFlippedCards([]);\n    setPhase('playing');\n\n    // Oyuncuların skorlarını sıfırla\n    setPlayers(Array.from({\n      length: playerCount\n    }, (_, i) => ({\n      id: i,\n      score: 0\n    })));\n    setActivePlayer(0);\n  };\n\n  // Kart tıklama\n  const handleCardClick = cardId => {\n    // İşlem sürüyorsa veya kart çevrilmiş/eşleşmiş ise tıklanamaz\n    if (isProcessing || flippedCards.length >= 2 || cards[cardId].flipped || cards[cardId].matched) {\n      return;\n    }\n\n    // Kartı çevir\n    const updatedCards = [...cards];\n    updatedCards[cardId].flipped = true;\n    setCards(updatedCards);\n\n    // Çevrilen kartları güncelle\n    const updatedFlippedCards = [...flippedCards, cardId];\n    setFlippedCards(updatedFlippedCards);\n\n    // İki kart çevrildiyse, eşleşme kontrolü\n    if (updatedFlippedCards.length === 2) {\n      setIsProcessing(true);\n      const [firstCardId, secondCardId] = updatedFlippedCards;\n      const firstCard = updatedCards[firstCardId];\n      const secondCard = updatedCards[secondCardId];\n\n      // Eşleşme kontrolü\n      if (firstCard.symbol === secondCard.symbol) {\n        // Eşleşme durumu\n        setTimeout(() => {\n          // Kartları eşleşti olarak işaretle\n          const matchedCards = [...updatedCards];\n          matchedCards[firstCardId].matched = true;\n          matchedCards[secondCardId].matched = true;\n          setCards(matchedCards);\n\n          // Aktif oyuncuya puan ekle\n          setPlayers(prev => prev.map((p, i) => {\n            if (i === activePlayer) {\n              return {\n                ...p,\n                score: p.score + 10\n              };\n            }\n            return p;\n          }));\n\n          // Eşleşen çift sayısını artır\n          setMatchedPairs(prev => prev + 1);\n\n          // Sıradaki hamle için hazırlık\n          setFlippedCards([]);\n          setIsProcessing(false);\n\n          // Oyun bitti mi kontrol et\n          const totalPairs = updatedCards.length / 2;\n          if (matchedPairs + 1 >= totalPairs) {\n            setPhase('end');\n          }\n        }, 1000);\n      } else {\n        // Eşleşmeme durumu\n        setTimeout(() => {\n          // Kartları geri çevir\n          const unflippedCards = [...updatedCards];\n          unflippedCards[firstCardId].flipped = false;\n          unflippedCards[secondCardId].flipped = false;\n          setCards(unflippedCards);\n\n          // Sıradaki oyuncuya geç\n          setActivePlayer((activePlayer + 1) % playerCount);\n\n          // Sıradaki hamle için hazırlık\n          setFlippedCards([]);\n          setIsProcessing(false);\n        }, 1000);\n      }\n    }\n  };\n\n  // Kazananı bul\n  const winner = players.reduce((max, p) => p.score > max.score ? p : max, players[0]);\n\n  // Beraberlik durumu\n  const isTie = players.filter(p => p.score === winner.score).length > 1;\n  return /*#__PURE__*/_jsxDEV(GameContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: \"Haf\\u0131za E\\u015Fle\\u015Ftirme\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n      children: players.map((player, index) => /*#__PURE__*/_jsxDEV(PlayerScore, {\n        color: PLAYER_COLORS[index],\n        active: activePlayer === index && phase === 'playing',\n        children: [\"Oyuncu \", index + 1, \": \", player.score]\n      }, player.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), phase === 'ready' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(InfoText, {\n        children: \"Haf\\u0131zan\\u0131 Test Et!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NextButton, {\n        onClick: initializeGame,\n        children: \"Oyunu Ba\\u015Flat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), phase === 'playing' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(InfoText, {\n        children: [\"S\\u0131ra: Oyuncu \", activePlayer + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CardsGrid, {\n        children: cards.map(card => /*#__PURE__*/_jsxDEV(CardContainer, {\n          flipped: card.flipped,\n          matched: card.matched,\n          onClick: () => handleCardClick(card.id),\n          children: [/*#__PURE__*/_jsxDEV(CardBack, {\n            flipped: card.flipped,\n            matched: card.matched\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(CardFront, {\n            flipped: card.flipped,\n            matched: card.matched,\n            back: true,\n            children: card.symbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 17\n          }, this)]\n        }, card.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), phase === 'end' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(InfoText, {\n        children: isTie ? 'Oyun Bitti! Beraberlik!' : `Oyun Bitti! Kazanan: Oyuncu ${winner.id + 1}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n        children: players.map((player, index) => /*#__PURE__*/_jsxDEV(PlayerScore, {\n          color: PLAYER_COLORS[index],\n          active: player.id === winner.id && !isTie,\n          children: [\"Oyuncu \", index + 1, \": \", player.score]\n        }, player.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NextButton, {\n        onClick: () => window.location.reload(),\n        children: \"Tekrar Oyna\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 308,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryMatch, \"C5R6NLqVgE1Ax+UKYDDv8M9WFec=\");\n_c1 = MemoryMatch;\nexport default MemoryMatch;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1;\n$RefreshReg$(_c, \"GameContainer\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"ScoreBoard\");\n$RefreshReg$(_c4, \"PlayerScore\");\n$RefreshReg$(_c5, \"CardsGrid\");\n$RefreshReg$(_c6, \"CardContainer\");\n$RefreshReg$(_c7, \"CardBack\");\n$RefreshReg$(_c8, \"CardFront\");\n$RefreshReg$(_c9, \"InfoText\");\n$RefreshReg$(_c0, \"NextButton\");\n$RefreshReg$(_c1, \"MemoryMatch\");","map":{"version":3,"names":["React","useState","styled","keyframes","jsxDEV","_jsxDEV","Fragment","_Fragment","fadeIn","pulse","flip","flipBack","GameContainer","div","_c","Header","h2","_c2","ScoreBoard","_c3","PlayerScore","props","color","active","_c4","CardsGrid","_c5","CardContainer","flipped","matched","_c6","CardFace","back","CardBack","_c7","CardFront","_c8","InfoText","_c9","NextButton","button","_c0","CARD_SYMBOLS","PLAYER_COLORS","MemoryMatch","playerCount","_s","players","setPlayers","Array","from","length","_","i","id","score","activePlayer","setActivePlayer","cards","setCards","flippedCards","setFlippedCards","matchedPairs","setMatchedPairs","isProcessing","setIsProcessing","phase","setPhase","initializeGame","pairCount","selectedSymbols","slice","cardPairs","shuffledCards","sort","Math","random","map","symbol","index","handleCardClick","cardId","updatedCards","updatedFlippedCards","firstCardId","secondCardId","firstCard","secondCard","setTimeout","matchedCards","prev","p","totalPairs","unflippedCards","winner","reduce","max","isTie","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","player","onClick","card","window","location","reload","_c1","$RefreshReg$"],"sources":["/home/cesur/Documents/Projects/iki-kisilik-web/src/components/games/MemoryMatch/MemoryMatch.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled, { keyframes, css } from 'styled-components';\n\n// Animasyonlar\nconst fadeIn = keyframes`\n  from { opacity: 0; transform: translateY(-10px); }\n  to { opacity: 1; transform: translateY(0); }\n`;\n\nconst pulse = keyframes`\n  0% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n  100% { transform: scale(1); }\n`;\n\nconst flip = keyframes`\n  0% { transform: rotateY(0deg); }\n  100% { transform: rotateY(180deg); }\n`;\n\nconst flipBack = keyframes`\n  0% { transform: rotateY(180deg); }\n  100% { transform: rotateY(0deg); }\n`;\n\n// Stil componentleri\nconst GameContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  max-width: 900px;\n  width: 100%;\n  margin: 0 auto;\n  padding: 20px;\n`;\n\nconst Header = styled.h2`\n  color: #fff;\n  font-size: 2.2rem;\n  text-align: center;\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n  text-shadow: 0 2px 10px rgba(0,0,0,0.2);\n`;\n\nconst ScoreBoard = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 24px;\n  margin: 1rem 0 2rem;\n  padding: 12px 20px;\n  border-radius: 12px;\n  background: rgba(255,255,255,0.1);\n  animation: ${fadeIn} 0.5s ease-out;\n`;\n\nconst PlayerScore = styled.div<{ color: string, active: boolean }>`\n  color: ${props => props.color};\n  font-size: 1.2rem;\n  font-weight: bold;\n  padding: 8px 15px;\n  border-radius: 8px;\n  border: 2px solid ${props => props.color};\n  background: ${props => props.active ? `${props.color}22` : 'transparent'};\n  animation: ${props => props.active ? pulse : 'none'} 1s infinite;\n`;\n\nconst CardsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 15px;\n  max-width: 650px;\n  margin: 0 auto;\n\n  @media (max-width: 600px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`;\n\nconst CardContainer = styled.div<{ flipped: boolean, matched: boolean }>`\n  width: 120px;\n  height: 120px;\n  position: relative;\n  perspective: 1000px;\n  cursor: ${props => (props.flipped || props.matched) ? 'default' : 'pointer'};\n  \n  @media (max-width: 600px) {\n    width: 100px;\n    height: 100px;\n  }\n`;\n\nconst CardFace = styled.div<{ flipped: boolean, matched: boolean, back?: boolean }>`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border-radius: 12px;\n  backface-visibility: hidden;\n  transition: all 0.4s ease-out;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2.5rem;\n  user-select: none;\n  box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n  \n  ${props => props.back && `\n    transform: rotateY(180deg);\n  `}\n  \n  ${props => props.flipped && `\n    transform: ${props.back ? 'rotateY(0deg)' : 'rotateY(-180deg)'};\n  `}\n  \n  ${props => props.matched && `\n    opacity: 0.8;\n    box-shadow: 0 0 15px rgba(46, 204, 113, 0.8);\n  `}\n`;\n\nconst CardBack = styled(CardFace)`\n  background: linear-gradient(135deg, #3498db, #9b59b6);\n`;\n\nconst CardFront = styled(CardFace)`\n  background: #fff;\n  color: #333;\n`;\n\nconst InfoText = styled.div`\n  font-size: 1.8rem;\n  font-weight: bold;\n  text-align: center;\n  margin: 1.5rem 0;\n  color: white;\n  background: linear-gradient(45deg, #3498db, #1abc9c);\n  padding: 15px 30px;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n`;\n\nconst NextButton = styled.button`\n  background: linear-gradient(45deg, #2ecc71, #27ae60);\n  color: white;\n  font-size: 1.3rem;\n  font-weight: bold;\n  padding: 12px 40px;\n  border: none;\n  border-radius: 8px;\n  margin-top: 2rem;\n  cursor: pointer;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n  \n  &:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 15px rgba(0,0,0,0.2);\n  }\n`;\n\n// Oyun sembolleri\nconst CARD_SYMBOLS = [\n  '🍎', '🍌', '🍒', '🍓', '🍊', '🍉', \n  '🍇', '🥝', '🍍', '🥥', '🍄', '🌶️'\n];\n\nconst PLAYER_COLORS = ['#e74c3c', '#3498db', '#2ecc71', '#f1c40f'];\n\ninterface Player {\n  id: number;\n  score: number;\n}\n\ninterface Card {\n  id: number;\n  symbol: string;\n  flipped: boolean;\n  matched: boolean;\n}\n\nconst MemoryMatch: React.FC<{ playerCount: number }> = ({ playerCount }) => {\n  const [players, setPlayers] = useState<Player[]>(\n    Array.from({ length: playerCount }, (_, i) => ({ id: i, score: 0 }))\n  );\n  const [activePlayer, setActivePlayer] = useState(0);\n  const [cards, setCards] = useState<Card[]>([]);\n  const [flippedCards, setFlippedCards] = useState<number[]>([]);\n  const [matchedPairs, setMatchedPairs] = useState<number>(0);\n  const [isProcessing, setIsProcessing] = useState<boolean>(false);\n  const [phase, setPhase] = useState<'ready' | 'playing' | 'end'>('ready');\n  \n  // Kartları karıştır ve oyunu hazırla\n  const initializeGame = () => {\n    // Oyuncu sayısına göre kart sayısını belirle (çift sayı olmalı)\n    const pairCount = playerCount === 2 ? 8 : (playerCount === 3 ? 9 : 12);\n    \n    // Sembolleri seç ve çiftler oluştur\n    const selectedSymbols = CARD_SYMBOLS.slice(0, pairCount);\n    const cardPairs = [...selectedSymbols, ...selectedSymbols];\n    \n    // Kartları karıştır ve id ekle\n    const shuffledCards = cardPairs\n      .sort(() => Math.random() - 0.5)\n      .map((symbol, index) => ({\n        id: index,\n        symbol,\n        flipped: false,\n        matched: false\n      }));\n    \n    setCards(shuffledCards);\n    setMatchedPairs(0);\n    setFlippedCards([]);\n    setPhase('playing');\n    \n    // Oyuncuların skorlarını sıfırla\n    setPlayers(Array.from({ length: playerCount }, (_, i) => ({ id: i, score: 0 })));\n    setActivePlayer(0);\n  };\n  \n  // Kart tıklama\n  const handleCardClick = (cardId: number) => {\n    // İşlem sürüyorsa veya kart çevrilmiş/eşleşmiş ise tıklanamaz\n    if (\n      isProcessing || \n      flippedCards.length >= 2 || \n      cards[cardId].flipped || \n      cards[cardId].matched\n    ) {\n      return;\n    }\n    \n    // Kartı çevir\n    const updatedCards = [...cards];\n    updatedCards[cardId].flipped = true;\n    setCards(updatedCards);\n    \n    // Çevrilen kartları güncelle\n    const updatedFlippedCards = [...flippedCards, cardId];\n    setFlippedCards(updatedFlippedCards);\n    \n    // İki kart çevrildiyse, eşleşme kontrolü\n    if (updatedFlippedCards.length === 2) {\n      setIsProcessing(true);\n      \n      const [firstCardId, secondCardId] = updatedFlippedCards;\n      const firstCard = updatedCards[firstCardId];\n      const secondCard = updatedCards[secondCardId];\n      \n      // Eşleşme kontrolü\n      if (firstCard.symbol === secondCard.symbol) {\n        // Eşleşme durumu\n        setTimeout(() => {\n          // Kartları eşleşti olarak işaretle\n          const matchedCards = [...updatedCards];\n          matchedCards[firstCardId].matched = true;\n          matchedCards[secondCardId].matched = true;\n          setCards(matchedCards);\n          \n          // Aktif oyuncuya puan ekle\n          setPlayers(prev => prev.map((p, i) => {\n            if (i === activePlayer) {\n              return { ...p, score: p.score + 10 };\n            }\n            return p;\n          }));\n          \n          // Eşleşen çift sayısını artır\n          setMatchedPairs(prev => prev + 1);\n          \n          // Sıradaki hamle için hazırlık\n          setFlippedCards([]);\n          setIsProcessing(false);\n          \n          // Oyun bitti mi kontrol et\n          const totalPairs = updatedCards.length / 2;\n          if (matchedPairs + 1 >= totalPairs) {\n            setPhase('end');\n          }\n        }, 1000);\n      } else {\n        // Eşleşmeme durumu\n        setTimeout(() => {\n          // Kartları geri çevir\n          const unflippedCards = [...updatedCards];\n          unflippedCards[firstCardId].flipped = false;\n          unflippedCards[secondCardId].flipped = false;\n          setCards(unflippedCards);\n          \n          // Sıradaki oyuncuya geç\n          setActivePlayer((activePlayer + 1) % playerCount);\n          \n          // Sıradaki hamle için hazırlık\n          setFlippedCards([]);\n          setIsProcessing(false);\n        }, 1000);\n      }\n    }\n  };\n  \n  // Kazananı bul\n  const winner = players.reduce((max, p) => p.score > max.score ? p : max, players[0]);\n  \n  // Beraberlik durumu\n  const isTie = players.filter(p => p.score === winner.score).length > 1;\n  \n  return (\n    <GameContainer>\n      <Header>Hafıza Eşleştirme</Header>\n      \n      <ScoreBoard>\n        {players.map((player, index) => (\n          <PlayerScore \n            key={player.id} \n            color={PLAYER_COLORS[index]} \n            active={activePlayer === index && phase === 'playing'}\n          >\n            Oyuncu {index + 1}: {player.score}\n          </PlayerScore>\n        ))}\n      </ScoreBoard>\n      \n      {phase === 'ready' && (\n        <>\n          <InfoText>Hafızanı Test Et!</InfoText>\n          <NextButton onClick={initializeGame}>Oyunu Başlat</NextButton>\n        </>\n      )}\n      \n      {phase === 'playing' && (\n        <>\n          <InfoText>Sıra: Oyuncu {activePlayer + 1}</InfoText>\n          <CardsGrid>\n            {cards.map(card => (\n              <CardContainer \n                key={card.id} \n                flipped={card.flipped} \n                matched={card.matched}\n                onClick={() => handleCardClick(card.id)}\n              >\n                <CardBack \n                  flipped={card.flipped} \n                  matched={card.matched}\n                />\n                <CardFront \n                  flipped={card.flipped}\n                  matched={card.matched}\n                  back\n                >\n                  {card.symbol}\n                </CardFront>\n              </CardContainer>\n            ))}\n          </CardsGrid>\n        </>\n      )}\n      \n      {phase === 'end' && (\n        <>\n          <InfoText>\n            {isTie \n              ? 'Oyun Bitti! Beraberlik!' \n              : `Oyun Bitti! Kazanan: Oyuncu ${winner.id + 1}`\n            }\n          </InfoText>\n          <ScoreBoard>\n            {players.map((player, index) => (\n              <PlayerScore \n                key={player.id} \n                color={PLAYER_COLORS[index]}\n                active={player.id === winner.id && !isTie}\n              >\n                Oyuncu {index + 1}: {player.score}\n              </PlayerScore>\n            ))}\n          </ScoreBoard>\n          <NextButton onClick={() => window.location.reload()}>\n            Tekrar Oyna\n          </NextButton>\n        </>\n      )}\n    </GameContainer>\n  );\n};\n\nexport default MemoryMatch;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}