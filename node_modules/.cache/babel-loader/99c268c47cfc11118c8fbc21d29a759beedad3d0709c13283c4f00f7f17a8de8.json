{"ast":null,"code":"var _jsxFileName = \"/home/cesur/Documents/Projects/iki-kisilik-web/src/components/games/TankGame/TankGame.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport Tank from './Tank';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameArea = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: #d2b48c; // Çöl rengi\n  position: relative;\n  overflow: hidden;\n`;\n_c = GameArea;\nconst GameGrid = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-image: \n    linear-gradient(rgba(0, 0, 0, 0.1) 1px, transparent 1px),\n    linear-gradient(90deg, rgba(0, 0, 0, 0.1) 1px, transparent 1px);\n  background-size: 40px 40px;\n  pointer-events: none;\n`;\n_c2 = GameGrid;\nconst Grass = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-image: url(\"data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M50 0 L100 50 L50 100 L0 50 Z' fill='%232ecc71' fill-opacity='0.1'/%3E%3C/svg%3E\");\n  background-size: 20px 20px;\n  pointer-events: none;\n`;\nconst Bullet = styled.div`\n  position: absolute;\n  width: 8px;\n  height: 8px;\n  background: #fff;\n  border-radius: 50%;\n  transform: rotate(${props => props.rotation}deg);\n  box-shadow: 0 0 5px rgba(255, 255, 255, 0.8);\n`;\n_c3 = Bullet;\nconst HealthBar = styled.div`\n  position: absolute;\n  width: 40px;\n  height: 4px;\n  background: rgba(0, 0, 0, 0.3);\n  border-radius: 2px;\n  overflow: hidden;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: ${props => props.health}%;\n    height: 100%;\n    background: ${props => props.color};\n    transition: width 0.3s ease;\n  }\n`;\n_c4 = HealthBar;\nconst Controls = styled.div`\n  position: absolute;\n  bottom: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  display: flex;\n  gap: 20px;\n  z-index: 1;\n`;\nconst ControlButton = styled.button`\n  background: ${props => props.color};\n  border: none;\n  width: 50px;\n  height: 50px;\n  border-radius: 25px;\n  color: white;\n  font-size: 24px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  transition: all 0.2s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);\n  }\n\n  &:active {\n    transform: translateY(1px);\n  }\n`;\nconst FireButton = styled(ControlButton)`\n  background: #e74c3c;\n  width: 60px;\n  height: 60px;\n  font-size: 20px;\n`;\nconst CornerButton = styled.button`\n  position: absolute;\n  width: 90px;\n  height: 90px;\n  border-radius: 50%;\n  background: ${props => props.color};\n  color: #fff;\n  font-size: 2.5rem;\n  border: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 16px rgba(0,0,0,0.15);\n  z-index: 10;\n  cursor: pointer;\n  opacity: 0.95;\n  ${props => props.position === 'bottomLeft' && 'left: 30px; bottom: 30px;'}\n  ${props => props.position === 'bottomRight' && 'right: 30px; bottom: 30px;'}\n  ${props => props.position === 'topLeft' && 'left: 30px; top: 30px;'}\n  ${props => props.position === 'topRight' && 'right: 30px; top: 30px;'}\n`;\n_c5 = CornerButton;\nconst playerColors = {\n  1: '#e74c3c',\n  // Kırmızı\n  2: '#3498db',\n  // Mavi\n  3: '#2ecc71',\n  // Yeşil\n  4: '#f1c40f' // Sarı\n};\nconst cornerPositions = ['bottomLeft',\n// 1. oyuncu\n'bottomRight',\n// 2. oyuncu\n'topLeft',\n// 3. oyuncu\n'topRight' // 4. oyuncu\n];\nconst TANK_SIZE = 60;\nconst CANNON_LENGTH = 30;\nconst GRID_SIZE = 80; // Kare boyutu\nconst GRID_COLS = Math.floor(window.innerWidth / GRID_SIZE);\nconst GRID_ROWS = Math.floor(window.innerHeight / GRID_SIZE);\nconst Wall = styled.div`\n  position: absolute;\n  background: #e0e0e0;\n  border: 3px solid #bdbdbd;\n  box-sizing: border-box;\n  border-radius: 4px;\n`;\n_c6 = Wall;\nconst GrassPatch = styled.div`\n  position: absolute;\n  width: 40px;\n  height: 40px;\n  background: radial-gradient(circle at 60% 40%, #4caf50 70%, #388e3c 100%);\n  border-radius: 50%;\n  opacity: 0.7;\n`;\n\n// Labirent için grid tabanlı duvarlar\nfunction generateMaze(cols, rows) {\n  // Basit bir maze algoritması (örnek: her satırda ve sütunda rastgele kısa kenarlı duvarlar)\n  const walls = [];\n  for (let y = 0; y < rows; y++) {\n    for (let x = 0; x < cols; x++) {\n      // Yatay duvar\n      if (Math.random() > 0.6 && x < cols - 1) {\n        walls.push({\n          x: x * GRID_SIZE,\n          y: y * GRID_SIZE,\n          w: GRID_SIZE,\n          h: 8\n        });\n      }\n      // Dikey duvar\n      if (Math.random() > 0.6 && y < rows - 1) {\n        walls.push({\n          x: x * GRID_SIZE,\n          y: y * GRID_SIZE,\n          w: 8,\n          h: GRID_SIZE\n        });\n      }\n    }\n  }\n  // Kenar duvarları\n  walls.push({\n    x: 0,\n    y: 0,\n    w: cols * GRID_SIZE,\n    h: 8\n  }); // üst\n  walls.push({\n    x: 0,\n    y: rows * GRID_SIZE - 8,\n    w: cols * GRID_SIZE,\n    h: 8\n  }); // alt\n  walls.push({\n    x: 0,\n    y: 0,\n    w: 8,\n    h: rows * GRID_SIZE\n  }); // sol\n  walls.push({\n    x: cols * GRID_SIZE - 8,\n    y: 0,\n    w: 8,\n    h: rows * GRID_SIZE\n  }); // sağ\n  return walls;\n}\nconst TankGame = ({\n  playerCount,\n  deviceType\n}) => {\n  _s();\n  const [players, setPlayers] = useState([]);\n  const [bullets, setBullets] = useState([]);\n  const [rotating, setRotating] = useState({});\n  const [moving, setMoving] = useState({});\n  const [activePlayer, setActivePlayer] = useState(1);\n  const [walls, setWalls] = useState([]);\n  useEffect(() => {\n    const initialPlayers = Array.from({\n      length: playerCount\n    }, (_, i) => ({\n      id: i + 1,\n      position: {\n        x: window.innerWidth / (playerCount + 1) * (i + 1),\n        y: window.innerHeight / 2\n      },\n      rotation: 0,\n      health: 100,\n      isMoving: false\n    }));\n    setPlayers(initialPlayers);\n  }, [playerCount]);\n  const movePlayer = useCallback((playerId, direction) => {\n    setPlayers(prevPlayers => prevPlayers.map(player => {\n      if (player.id === playerId) {\n        const speed = 5;\n        let newX = player.position.x;\n        let newY = player.position.y;\n        let newRotation = player.rotation;\n        switch (direction) {\n          case 'up':\n            newY -= speed;\n            newRotation = 0;\n            break;\n          case 'down':\n            newY += speed;\n            newRotation = 180;\n            break;\n          case 'left':\n            newX -= speed;\n            newRotation = 270;\n            break;\n          case 'right':\n            newX += speed;\n            newRotation = 90;\n            break;\n        }\n\n        // Sınırları kontrol et\n        newX = Math.max(0, Math.min(window.innerWidth - 60, newX));\n        newY = Math.max(0, Math.min(window.innerHeight - 60, newY));\n        return {\n          ...player,\n          position: {\n            x: newX,\n            y: newY\n          },\n          rotation: newRotation,\n          isMoving: true\n        };\n      }\n      return {\n        ...player,\n        isMoving: false\n      };\n    }));\n  }, []);\n  const fireBullet = useCallback(playerId => {\n    const player = players.find(p => p.id === playerId);\n    if (!player) return;\n    const rad = player.rotation * Math.PI / 180;\n    // Tankın merkezinden namlu ucuna offset\n    const offsetX = Math.sin(rad) * (TANK_SIZE / 2 + CANNON_LENGTH / 2);\n    const offsetY = -Math.cos(rad) * (TANK_SIZE / 2 + CANNON_LENGTH / 2);\n    const bullet = {\n      id: Date.now() + Math.random(),\n      playerId,\n      position: {\n        x: player.position.x + TANK_SIZE / 2 + offsetX - 4,\n        // 4: mermi yarıçapı\n        y: player.position.y + TANK_SIZE / 2 + offsetY - 4\n      },\n      rotation: player.rotation\n    };\n    setBullets(prev => [...prev, bullet]);\n  }, [players]);\n\n  // Maze oluştur (ilk renderda bir kez)\n  useEffect(() => {\n    setWalls(generateMaze(GRID_COLS, GRID_ROWS));\n  }, []);\n\n  // Mermiler düz gitsin ve sekme efektiyle yön değiştirsin, 3 sekmeden sonra kaybolsun\n  useEffect(() => {\n    const bulletInterval = setInterval(() => {\n      setBullets(prevBullets => {\n        return prevBullets.map(bullet => {\n          let speed = 10;\n          let rad = bullet.rotation * Math.PI / 180;\n          let newX = bullet.position.x + Math.cos(rad) * speed;\n          let newY = bullet.position.y + Math.sin(rad) * speed;\n          let newRotation = bullet.rotation;\n          let bounces = bullet.bounces || 0;\n          // Sınırdan sekme\n          if (newX < 0 || newX > window.innerWidth - 8) {\n            newRotation = 180 - newRotation;\n            bounces++;\n          }\n          if (newY < 0 || newY > window.innerHeight - 8) {\n            newRotation = 360 - newRotation;\n            bounces++;\n          }\n          // Duvarlardan sekme\n          for (const wall of walls) {\n            if (newX + 8 > wall.x && newX < wall.x + wall.w && newY + 8 > wall.y && newY < wall.y + wall.h) {\n              // Yatay mı dikey mi?\n              if (wall.w > wall.h) {\n                newRotation = 360 - newRotation;\n              } else {\n                newRotation = 180 - newRotation;\n              }\n              bounces++;\n              break;\n            }\n          }\n          if (bounces >= 3) return null;\n          return {\n            ...bullet,\n            position: {\n              x: newX,\n              y: newY\n            },\n            rotation: newRotation,\n            bounces\n          };\n        }).filter(bullet => bullet !== null);\n      });\n    }, 16);\n    return () => clearInterval(bulletInterval);\n  }, [walls]);\n\n  // Başlangıçta tanklar dönüyor, hareket etmiyor\n  useEffect(() => {\n    if (deviceType !== 'phone') return;\n    const initialRotating = {};\n    const initialMoving = {};\n    for (let i = 1; i <= playerCount; i++) {\n      initialRotating[i] = true;\n      initialMoving[i] = false;\n    }\n    setRotating(initialRotating);\n    setMoving(initialMoving);\n  }, [playerCount, deviceType]);\n\n  // Tanklar sadece rotating true ise döner\n  useEffect(() => {\n    if (deviceType !== 'phone') return;\n    const interval = setInterval(() => {\n      setPlayers(prevPlayers => prevPlayers.map(player => {\n        if (rotating[player.id]) {\n          return {\n            ...player,\n            rotation: player.rotation + 2 // Sürekli artar, sıfırlanmaz\n          };\n        }\n        return player;\n      }));\n    }, 30);\n    return () => clearInterval(interval);\n  }, [rotating, deviceType]);\n\n  // Tanklar sadece moving true ise ileri gider\n  useEffect(() => {\n    if (deviceType !== 'phone') return;\n    const interval = setInterval(() => {\n      setPlayers(prevPlayers => prevPlayers.map(player => {\n        if (moving[player.id]) {\n          const speed = 6;\n          let newX = player.position.x;\n          let newY = player.position.y;\n          let rad = player.rotation * Math.PI / 180;\n          newX += Math.cos(rad) * speed;\n          newY += Math.sin(rad) * speed;\n          newX = Math.max(0, Math.min(window.innerWidth - TANK_SIZE, newX));\n          newY = Math.max(0, Math.min(window.innerHeight - TANK_SIZE, newY));\n          return {\n            ...player,\n            position: {\n              x: newX,\n              y: newY\n            },\n            isMoving: true\n          };\n        }\n        return {\n          ...player,\n          isMoving: false\n        };\n      }));\n    }, 16);\n    return () => clearInterval(interval);\n  }, [moving, deviceType]);\n\n  // Butona tıklama: ateş et (mermi namlunun ucundan, doğru yöne çıkacak)\n  const handleCornerButtonClick = playerId => {\n    setPlayers(prevPlayers => {\n      const player = prevPlayers.find(p => p.id === playerId);\n      if (!player) return prevPlayers;\n      const rad = player.rotation * Math.PI / 180;\n      const centerX = player.position.x + TANK_SIZE / 2;\n      const centerY = player.position.y + TANK_SIZE / 2;\n      const offsetX = Math.cos(rad) * (TANK_SIZE / 2 + CANNON_LENGTH);\n      const offsetY = Math.sin(rad) * (TANK_SIZE / 2 + CANNON_LENGTH);\n      const bullet = {\n        id: Date.now() + Math.random(),\n        playerId,\n        position: {\n          x: centerX + offsetX - 4,\n          y: centerY + offsetY - 4\n        },\n        rotation: player.rotation\n      };\n      setBullets(prev => [...prev, bullet]);\n      return prevPlayers;\n    });\n  };\n\n  // Butona basılı tutma: hareket başlar, dönme durur\n  const handleCornerButtonDown = playerId => {\n    setRotating(r => ({\n      ...r,\n      [playerId]: false\n    }));\n    setMoving(m => ({\n      ...m,\n      [playerId]: true\n    }));\n  };\n\n  // Butondan el çekilince: hareket durur, dönme başlar\n  const handleCornerButtonUp = playerId => {\n    setRotating(r => ({\n      ...r,\n      [playerId]: true\n    }));\n    setMoving(m => ({\n      ...m,\n      [playerId]: false\n    }));\n  };\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (deviceType !== 'computer') return;\n      const keyMap = {\n        'w': {\n          playerId: 1,\n          direction: 'up'\n        },\n        's': {\n          playerId: 1,\n          direction: 'down'\n        },\n        'a': {\n          playerId: 1,\n          direction: 'left'\n        },\n        'd': {\n          playerId: 1,\n          direction: 'right'\n        },\n        'f': {\n          playerId: 2,\n          direction: 'up'\n        },\n        'h': {\n          playerId: 2,\n          direction: 'down'\n        },\n        'g': {\n          playerId: 2,\n          direction: 'left'\n        },\n        't': {\n          playerId: 2,\n          direction: 'right'\n        },\n        'i': {\n          playerId: 3,\n          direction: 'up'\n        },\n        'k': {\n          playerId: 3,\n          direction: 'down'\n        },\n        'j': {\n          playerId: 3,\n          direction: 'left'\n        },\n        'l': {\n          playerId: 3,\n          direction: 'right'\n        }\n      };\n      const action = keyMap[e.key.toLowerCase()];\n      if (action) {\n        movePlayer(action.playerId, action.direction);\n      }\n\n      // Ateş etme tuşları\n      if (e.key === 'e' && activePlayer === 1) fireBullet(1);\n      if (e.key === 'y' && activePlayer === 2) fireBullet(2);\n      if (e.key === 'o' && activePlayer === 3) fireBullet(3);\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [deviceType, movePlayer, fireBullet, activePlayer]);\n  return /*#__PURE__*/_jsxDEV(GameArea, {\n    children: [/*#__PURE__*/_jsxDEV(GameGrid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 7\n    }, this), walls.map((w, i) => /*#__PURE__*/_jsxDEV(Wall, {\n      style: {\n        left: w.x,\n        top: w.y,\n        width: w.w,\n        height: w.h\n      }\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 9\n    }, this)), players.map(player => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(HealthBar, {\n        health: player.health,\n        color: playerColors[player.id],\n        style: {\n          left: player.position.x + 10,\n          top: player.position.y - 10\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Tank, {\n        color: playerColors[player.id],\n        rotation: player.rotation,\n        position: player.position,\n        isMoving: player.isMoving\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 11\n      }, this)]\n    }, player.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 9\n    }, this)), bullets.map(bullet => /*#__PURE__*/_jsxDEV(Bullet, {\n      rotation: bullet.rotation,\n      style: {\n        left: bullet.position.x,\n        top: bullet.position.y\n      }\n    }, bullet.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 9\n    }, this)), deviceType === 'phone' && players.map((player, idx) => /*#__PURE__*/_jsxDEV(CornerButton, {\n      color: playerColors[player.id],\n      position: cornerPositions[idx],\n      onClick: () => handleCornerButtonClick(player.id),\n      onTouchStart: () => handleCornerButtonDown(player.id),\n      onTouchEnd: () => handleCornerButtonUp(player.id),\n      onMouseDown: () => handleCornerButtonDown(player.id),\n      onMouseUp: () => handleCornerButtonUp(player.id),\n      onMouseLeave: () => handleCornerButtonUp(player.id),\n      children: \"\\uD83D\\uDE80\"\n    }, player.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 492,\n    columnNumber: 5\n  }, this);\n};\n_s(TankGame, \"VG1l0sBv7RceB+l4Po8JrlIp8m0=\");\n_c7 = TankGame;\nexport default TankGame;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"GameArea\");\n$RefreshReg$(_c2, \"GameGrid\");\n$RefreshReg$(_c3, \"Bullet\");\n$RefreshReg$(_c4, \"HealthBar\");\n$RefreshReg$(_c5, \"CornerButton\");\n$RefreshReg$(_c6, \"Wall\");\n$RefreshReg$(_c7, \"TankGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","styled","Tank","jsxDEV","_jsxDEV","GameArea","div","_c","GameGrid","_c2","Grass","Bullet","props","rotation","_c3","HealthBar","health","color","_c4","Controls","ControlButton","button","FireButton","CornerButton","position","_c5","playerColors","cornerPositions","TANK_SIZE","CANNON_LENGTH","GRID_SIZE","GRID_COLS","Math","floor","window","innerWidth","GRID_ROWS","innerHeight","Wall","_c6","GrassPatch","generateMaze","cols","rows","walls","y","x","random","push","w","h","TankGame","playerCount","deviceType","_s","players","setPlayers","bullets","setBullets","rotating","setRotating","moving","setMoving","activePlayer","setActivePlayer","setWalls","initialPlayers","Array","from","length","_","i","id","isMoving","movePlayer","playerId","direction","prevPlayers","map","player","speed","newX","newY","newRotation","max","min","fireBullet","find","p","rad","PI","offsetX","sin","offsetY","cos","bullet","Date","now","prev","bulletInterval","setInterval","prevBullets","bounces","wall","filter","clearInterval","initialRotating","initialMoving","interval","handleCornerButtonClick","centerX","centerY","handleCornerButtonDown","r","m","handleCornerButtonUp","handleKeyDown","e","keyMap","action","key","toLowerCase","addEventListener","removeEventListener","children","fileName","_jsxFileName","lineNumber","columnNumber","style","left","top","width","height","Fragment","idx","onClick","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","onMouseLeave","_c7","$RefreshReg$"],"sources":["/home/cesur/Documents/Projects/iki-kisilik-web/src/components/games/TankGame/TankGame.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport Tank from './Tank';\n\nconst GameArea = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: #d2b48c; // Çöl rengi\n  position: relative;\n  overflow: hidden;\n`;\n\nconst GameGrid = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-image: \n    linear-gradient(rgba(0, 0, 0, 0.1) 1px, transparent 1px),\n    linear-gradient(90deg, rgba(0, 0, 0, 0.1) 1px, transparent 1px);\n  background-size: 40px 40px;\n  pointer-events: none;\n`;\n\nconst Grass = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-image: url(\"data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M50 0 L100 50 L50 100 L0 50 Z' fill='%232ecc71' fill-opacity='0.1'/%3E%3C/svg%3E\");\n  background-size: 20px 20px;\n  pointer-events: none;\n`;\n\nconst Bullet = styled.div<{ rotation: number }>`\n  position: absolute;\n  width: 8px;\n  height: 8px;\n  background: #fff;\n  border-radius: 50%;\n  transform: rotate(${props => props.rotation}deg);\n  box-shadow: 0 0 5px rgba(255, 255, 255, 0.8);\n`;\n\nconst HealthBar = styled.div<{ health: number; color: string }>`\n  position: absolute;\n  width: 40px;\n  height: 4px;\n  background: rgba(0, 0, 0, 0.3);\n  border-radius: 2px;\n  overflow: hidden;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: ${props => props.health}%;\n    height: 100%;\n    background: ${props => props.color};\n    transition: width 0.3s ease;\n  }\n`;\n\nconst Controls = styled.div`\n  position: absolute;\n  bottom: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  display: flex;\n  gap: 20px;\n  z-index: 1;\n`;\n\nconst ControlButton = styled.button<{ color: string }>`\n  background: ${props => props.color};\n  border: none;\n  width: 50px;\n  height: 50px;\n  border-radius: 25px;\n  color: white;\n  font-size: 24px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  transition: all 0.2s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);\n  }\n\n  &:active {\n    transform: translateY(1px);\n  }\n`;\n\nconst FireButton = styled(ControlButton)`\n  background: #e74c3c;\n  width: 60px;\n  height: 60px;\n  font-size: 20px;\n`;\n\nconst CornerButton = styled.button<{ color: string; position: string }>`\n  position: absolute;\n  width: 90px;\n  height: 90px;\n  border-radius: 50%;\n  background: ${props => props.color};\n  color: #fff;\n  font-size: 2.5rem;\n  border: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 16px rgba(0,0,0,0.15);\n  z-index: 10;\n  cursor: pointer;\n  opacity: 0.95;\n  ${props => props.position === 'bottomLeft' && 'left: 30px; bottom: 30px;'}\n  ${props => props.position === 'bottomRight' && 'right: 30px; bottom: 30px;'}\n  ${props => props.position === 'topLeft' && 'left: 30px; top: 30px;'}\n  ${props => props.position === 'topRight' && 'right: 30px; top: 30px;'}\n`;\n\nconst playerColors: Record<1 | 2 | 3 | 4, string> = {\n  1: '#e74c3c', // Kırmızı\n  2: '#3498db', // Mavi\n  3: '#2ecc71', // Yeşil\n  4: '#f1c40f'  // Sarı\n};\n\ninterface Player {\n  id: number;\n  position: { x: number; y: number };\n  rotation: number;\n  health: number;\n  isMoving: boolean;\n}\n\ninterface Bullet {\n  id: number;\n  playerId: number;\n  position: { x: number; y: number };\n  rotation: number;\n  bounces?: number;\n}\n\nconst cornerPositions = [\n  'bottomLeft', // 1. oyuncu\n  'bottomRight', // 2. oyuncu\n  'topLeft', // 3. oyuncu\n  'topRight' // 4. oyuncu\n] as const;\n\ntype CornerPosition = typeof cornerPositions[number];\n\nconst TANK_SIZE = 60;\nconst CANNON_LENGTH = 30;\nconst GRID_SIZE = 80; // Kare boyutu\nconst GRID_COLS = Math.floor(window.innerWidth / GRID_SIZE);\nconst GRID_ROWS = Math.floor(window.innerHeight / GRID_SIZE);\n\nconst Wall = styled.div`\n  position: absolute;\n  background: #e0e0e0;\n  border: 3px solid #bdbdbd;\n  box-sizing: border-box;\n  border-radius: 4px;\n`;\n\nconst GrassPatch = styled.div`\n  position: absolute;\n  width: 40px;\n  height: 40px;\n  background: radial-gradient(circle at 60% 40%, #4caf50 70%, #388e3c 100%);\n  border-radius: 50%;\n  opacity: 0.7;\n`;\n\n// Labirent için grid tabanlı duvarlar\nfunction generateMaze(cols: number, rows: number) {\n  // Basit bir maze algoritması (örnek: her satırda ve sütunda rastgele kısa kenarlı duvarlar)\n  const walls: { x: number; y: number; w: number; h: number }[] = [];\n  for (let y = 0; y < rows; y++) {\n    for (let x = 0; x < cols; x++) {\n      // Yatay duvar\n      if (Math.random() > 0.6 && x < cols - 1) {\n        walls.push({\n          x: x * GRID_SIZE,\n          y: y * GRID_SIZE,\n          w: GRID_SIZE,\n          h: 8\n        });\n      }\n      // Dikey duvar\n      if (Math.random() > 0.6 && y < rows - 1) {\n        walls.push({\n          x: x * GRID_SIZE,\n          y: y * GRID_SIZE,\n          w: 8,\n          h: GRID_SIZE\n        });\n      }\n    }\n  }\n  // Kenar duvarları\n  walls.push({ x: 0, y: 0, w: cols * GRID_SIZE, h: 8 }); // üst\n  walls.push({ x: 0, y: rows * GRID_SIZE - 8, w: cols * GRID_SIZE, h: 8 }); // alt\n  walls.push({ x: 0, y: 0, w: 8, h: rows * GRID_SIZE }); // sol\n  walls.push({ x: cols * GRID_SIZE - 8, y: 0, w: 8, h: rows * GRID_SIZE }); // sağ\n  return walls;\n}\n\nconst TankGame: React.FC<{ \n  playerCount: number;\n  deviceType: 'computer' | 'phone';\n}> = ({ playerCount, deviceType }) => {\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [bullets, setBullets] = useState<Bullet[]>([]);\n  const [rotating, setRotating] = useState<{ [id: number]: boolean }>({});\n  const [moving, setMoving] = useState<{ [id: number]: boolean }>({});\n  const [activePlayer, setActivePlayer] = useState<1 | 2 | 3 | 4>(1);\n  const [walls, setWalls] = useState<{ x: number; y: number; w: number; h: number }[]>([]);\n\n  useEffect(() => {\n    const initialPlayers: Player[] = Array.from({ length: playerCount }, (_, i) => ({\n      id: i + 1,\n      position: {\n        x: window.innerWidth / (playerCount + 1) * (i + 1),\n        y: window.innerHeight / 2\n      },\n      rotation: 0,\n      health: 100,\n      isMoving: false\n    }));\n    setPlayers(initialPlayers);\n  }, [playerCount]);\n\n  const movePlayer = useCallback((playerId: number, direction: 'up' | 'down' | 'left' | 'right') => {\n    setPlayers(prevPlayers => \n      prevPlayers.map(player => {\n        if (player.id === playerId) {\n          const speed = 5;\n          let newX = player.position.x;\n          let newY = player.position.y;\n          let newRotation = player.rotation;\n\n          switch (direction) {\n            case 'up':\n              newY -= speed;\n              newRotation = 0;\n              break;\n            case 'down':\n              newY += speed;\n              newRotation = 180;\n              break;\n            case 'left':\n              newX -= speed;\n              newRotation = 270;\n              break;\n            case 'right':\n              newX += speed;\n              newRotation = 90;\n              break;\n          }\n\n          // Sınırları kontrol et\n          newX = Math.max(0, Math.min(window.innerWidth - 60, newX));\n          newY = Math.max(0, Math.min(window.innerHeight - 60, newY));\n\n          return {\n            ...player,\n            position: { x: newX, y: newY },\n            rotation: newRotation,\n            isMoving: true\n          };\n        }\n        return {\n          ...player,\n          isMoving: false\n        };\n      })\n    );\n  }, []);\n\n  const fireBullet = useCallback((playerId: number) => {\n    const player = players.find(p => p.id === playerId);\n    if (!player) return;\n\n    const rad = player.rotation * Math.PI / 180;\n    // Tankın merkezinden namlu ucuna offset\n    const offsetX = Math.sin(rad) * (TANK_SIZE / 2 + CANNON_LENGTH / 2);\n    const offsetY = -Math.cos(rad) * (TANK_SIZE / 2 + CANNON_LENGTH / 2);\n    const bullet: Bullet = {\n      id: Date.now() + Math.random(),\n      playerId,\n      position: {\n        x: player.position.x + TANK_SIZE / 2 + offsetX - 4, // 4: mermi yarıçapı\n        y: player.position.y + TANK_SIZE / 2 + offsetY - 4\n      },\n      rotation: player.rotation\n    };\n\n    setBullets(prev => [...prev, bullet]);\n  }, [players]);\n\n  // Maze oluştur (ilk renderda bir kez)\n  useEffect(() => {\n    setWalls(generateMaze(GRID_COLS, GRID_ROWS));\n  }, []);\n\n  // Mermiler düz gitsin ve sekme efektiyle yön değiştirsin, 3 sekmeden sonra kaybolsun\n  useEffect(() => {\n    const bulletInterval = setInterval(() => {\n      setBullets(prevBullets => {\n        return prevBullets\n          .map(bullet => {\n            let speed = 10;\n            let rad = bullet.rotation * Math.PI / 180;\n            let newX = bullet.position.x + Math.cos(rad) * speed;\n            let newY = bullet.position.y + Math.sin(rad) * speed;\n            let newRotation = bullet.rotation;\n            let bounces = bullet.bounces || 0;\n            // Sınırdan sekme\n            if (newX < 0 || newX > window.innerWidth - 8) {\n              newRotation = 180 - newRotation;\n              bounces++;\n            }\n            if (newY < 0 || newY > window.innerHeight - 8) {\n              newRotation = 360 - newRotation;\n              bounces++;\n            }\n            // Duvarlardan sekme\n            for (const wall of walls) {\n              if (\n                newX + 8 > wall.x && newX < wall.x + wall.w &&\n                newY + 8 > wall.y && newY < wall.y + wall.h\n              ) {\n                // Yatay mı dikey mi?\n                if (wall.w > wall.h) {\n                  newRotation = 360 - newRotation;\n                } else {\n                  newRotation = 180 - newRotation;\n                }\n                bounces++;\n                break;\n              }\n            }\n            if (bounces >= 3) return null;\n            return {\n              ...bullet,\n              position: { x: newX, y: newY },\n              rotation: newRotation,\n              bounces\n            };\n          })\n          .filter((bullet): bullet is Bullet => bullet !== null);\n      });\n    }, 16);\n    return () => clearInterval(bulletInterval);\n  }, [walls]);\n\n  // Başlangıçta tanklar dönüyor, hareket etmiyor\n  useEffect(() => {\n    if (deviceType !== 'phone') return;\n    const initialRotating: { [id: number]: boolean } = {};\n    const initialMoving: { [id: number]: boolean } = {};\n    for (let i = 1; i <= playerCount; i++) {\n      initialRotating[i] = true;\n      initialMoving[i] = false;\n    }\n    setRotating(initialRotating);\n    setMoving(initialMoving);\n  }, [playerCount, deviceType]);\n\n  // Tanklar sadece rotating true ise döner\n  useEffect(() => {\n    if (deviceType !== 'phone') return;\n    const interval = setInterval(() => {\n      setPlayers(prevPlayers => prevPlayers.map(player => {\n        if (rotating[player.id]) {\n          return {\n            ...player,\n            rotation: player.rotation + 2 // Sürekli artar, sıfırlanmaz\n          };\n        }\n        return player;\n      }));\n    }, 30);\n    return () => clearInterval(interval);\n  }, [rotating, deviceType]);\n\n  // Tanklar sadece moving true ise ileri gider\n  useEffect(() => {\n    if (deviceType !== 'phone') return;\n    const interval = setInterval(() => {\n      setPlayers(prevPlayers => prevPlayers.map(player => {\n        if (moving[player.id]) {\n          const speed = 6;\n          let newX = player.position.x;\n          let newY = player.position.y;\n          let rad = player.rotation * Math.PI / 180;\n          newX += Math.cos(rad) * speed;\n          newY += Math.sin(rad) * speed;\n          newX = Math.max(0, Math.min(window.innerWidth - TANK_SIZE, newX));\n          newY = Math.max(0, Math.min(window.innerHeight - TANK_SIZE, newY));\n          return {\n            ...player,\n            position: { x: newX, y: newY },\n            isMoving: true\n          };\n        }\n        return { ...player, isMoving: false };\n      }));\n    }, 16);\n    return () => clearInterval(interval);\n  }, [moving, deviceType]);\n\n  // Butona tıklama: ateş et (mermi namlunun ucundan, doğru yöne çıkacak)\n  const handleCornerButtonClick = (playerId: number) => {\n    setPlayers(prevPlayers => {\n      const player = prevPlayers.find(p => p.id === playerId);\n      if (!player) return prevPlayers;\n      const rad = player.rotation * Math.PI / 180;\n      const centerX = player.position.x + TANK_SIZE / 2;\n      const centerY = player.position.y + TANK_SIZE / 2;\n      const offsetX = Math.cos(rad) * (TANK_SIZE / 2 + CANNON_LENGTH);\n      const offsetY = Math.sin(rad) * (TANK_SIZE / 2 + CANNON_LENGTH);\n      const bullet = {\n        id: Date.now() + Math.random(),\n        playerId,\n        position: {\n          x: centerX + offsetX - 4,\n          y: centerY + offsetY - 4\n        },\n        rotation: player.rotation\n      };\n      setBullets(prev => [...prev, bullet]);\n      return prevPlayers;\n    });\n  };\n\n  // Butona basılı tutma: hareket başlar, dönme durur\n  const handleCornerButtonDown = (playerId: number) => {\n    setRotating(r => ({ ...r, [playerId]: false }));\n    setMoving(m => ({ ...m, [playerId]: true }));\n  };\n\n  // Butondan el çekilince: hareket durur, dönme başlar\n  const handleCornerButtonUp = (playerId: number) => {\n    setRotating(r => ({ ...r, [playerId]: true }));\n    setMoving(m => ({ ...m, [playerId]: false }));\n  };\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (deviceType !== 'computer') return;\n\n      const keyMap: { [key: string]: { playerId: number; direction: 'up' | 'down' | 'left' | 'right' } } = {\n        'w': { playerId: 1, direction: 'up' },\n        's': { playerId: 1, direction: 'down' },\n        'a': { playerId: 1, direction: 'left' },\n        'd': { playerId: 1, direction: 'right' },\n        'f': { playerId: 2, direction: 'up' },\n        'h': { playerId: 2, direction: 'down' },\n        'g': { playerId: 2, direction: 'left' },\n        't': { playerId: 2, direction: 'right' },\n        'i': { playerId: 3, direction: 'up' },\n        'k': { playerId: 3, direction: 'down' },\n        'j': { playerId: 3, direction: 'left' },\n        'l': { playerId: 3, direction: 'right' },\n      };\n\n      const action = keyMap[e.key.toLowerCase()];\n      if (action) {\n        movePlayer(action.playerId, action.direction);\n      }\n\n      // Ateş etme tuşları\n      if (e.key === 'e' && activePlayer === 1) fireBullet(1);\n      if (e.key === 'y' && activePlayer === 2) fireBullet(2);\n      if (e.key === 'o' && activePlayer === 3) fireBullet(3);\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [deviceType, movePlayer, fireBullet, activePlayer]);\n\n  return (\n    <GameArea>\n      <GameGrid />\n      {/* Duvarlar */}\n      {walls.map((w, i) => (\n        <Wall key={i} style={{ left: w.x, top: w.y, width: w.w, height: w.h }} />\n      ))}\n      {players.map(player => (\n        <React.Fragment key={player.id}>\n          <HealthBar \n            health={player.health}\n            color={playerColors[player.id as 1 | 2 | 3 | 4]}\n            style={{\n              left: player.position.x + 10,\n              top: player.position.y - 10\n            }}\n          />\n          <Tank\n            color={playerColors[player.id as 1 | 2 | 3 | 4]}\n            rotation={player.rotation}\n            position={player.position}\n            isMoving={player.isMoving}\n          />\n        </React.Fragment>\n      ))}\n      {bullets.map(bullet => (\n        <Bullet\n          key={bullet.id}\n          rotation={bullet.rotation}\n          style={{\n            left: bullet.position.x,\n            top: bullet.position.y\n          }}\n        />\n      ))}\n      {deviceType === 'phone' && players.map((player, idx) => (\n        <CornerButton\n          key={player.id}\n          color={playerColors[player.id as 1 | 2 | 3 | 4]}\n          position={cornerPositions[idx]}\n          onClick={() => handleCornerButtonClick(player.id)}\n          onTouchStart={() => handleCornerButtonDown(player.id)}\n          onTouchEnd={() => handleCornerButtonUp(player.id)}\n          onMouseDown={() => handleCornerButtonDown(player.id)}\n          onMouseUp={() => handleCornerButtonUp(player.id)}\n          onMouseLeave={() => handleCornerButtonUp(player.id)}\n        >\n          🚀\n        </CornerButton>\n      ))}\n    </GameArea>\n  );\n};\n\nexport default TankGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}